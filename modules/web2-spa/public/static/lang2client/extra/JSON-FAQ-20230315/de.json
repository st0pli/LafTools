{
    "JSON-Advantages-011": "JSON ist im Allgemeinen kleiner und schneller zu analysieren als XML und eignet sich daher ideal für die Client-Server-Kommunikation, bei der Bandbreite und Geschwindigkeit entscheidend sind.",
    "JSON-Basics-001": "Was ist JSON?",
    "JSON-Beautify-007": "Was ist JSON-Verschönerung?",
    "JSON-Beautify-Def-008": "Unter JSON-Verschönerung versteht man den Prozess der Formatierung von JSON-Daten in eine besser lesbare Form mit korrekter Einrückung und Zeilenumbrüchen, was die Analyse und das Debuggen erleichtert.",
    "JSON-Beautify-Example-009": "Vorher: '{\\\"key\\\":\\\"value\\\",\\\"array\\\":[1,2,3]}', Nachher: ​​'{\\n \\\"key\\\": \\\"value\\\", \\n \\\"array\\\": [\\n 1,\\n 2,\\n 3\\n ]\\n}'",
    "JSON-Def-002": "JSON (JavaScript Object Notation) ist ein leichtes, textbasiertes Datenaustauschformat, das für Menschen leicht zu lesen und zu schreiben und für Maschinen leicht zu analysieren und zu generieren ist.",
    "JSON-JavaScript-Support-020": "JSON wird von JavaScript nativ über die globalen Objekte „JSON.parse()“ und „JSON.stringify()“ unterstützt. Jedes gültige JSON ist auch ein gültiges JavaScript-Literalobjekt oder -Array, was eine nahtlose Konvertierung zwischen den beiden Formaten ermöglicht.",
    "JSON-JavaScript-Usage-021": "In der Webentwicklung wird JSON häufig für AJAX-Anfragen, serverseitiges Rendering und Datenspeicherung (z. B. lokaler Speicher oder IndexedDB) verwendet.",
    "JSON-Linting-022": "Was ist JSON-Linting und warum ist es wichtig?",
    "JSON-Linting-Benefit-024": "Linters können Laufzeitfehler aufgrund von ungültigem JSON verhindern, wodurch ein reibungsloser Datenaustausch gewährleistet und Zeit beim Debuggen potenzieller Probleme gespart wird.",
    "JSON-Linting-Explanation-023": "Beim JSON-Linting wird überprüft, ob ein JSON-Dokument der JSON-Spezifikation entspricht. Es hilft, Syntaxfehler zu identifizieren, bevor versucht wird, die Daten zu analysieren.",
    "JSON-Path-013": "Was ist ein JSON-Pfad?",
    "JSON-Path-Example-015": "$.store.book[0].title wählt den Titel des ersten Buchs in einem JSON-Objekt mit einem Store, der Bücher enthält, aus.",
    "JSON-Path-Explanation-014": "JSON Path ist eine XPath für XML ähnliche Abfragesprache, mit der Sie Daten aus JSON-Dokumenten mithilfe einer pfadähnlichen Notation extrahieren können.",
    "JSON-Path-Guide": "JSONPath – XPath für JSON",
    "JSON-Purpose-003": "Es wird hauptsächlich zur Übertragung von Daten zwischen einem Server und einer Webanwendung als Alternative zu XML verwendet und bietet native Unterstützung in JavaScript über die Methoden „JSON.parse()“ und „JSON.stringify()“.",
    "JSON-Scope-in-JavaScript-019": "Wie passt JSON in JavaScript?",
    "JSON-Security-025": "Welche Sicherheitsbedenken gibt es bei der Arbeit mit JSON?",
    "JSON-Security-Impact-026": "Zu den potenziellen Sicherheitsrisiken gehören JSON-Injection-Angriffe, bei denen schädliche Daten gesendet werden, die beim Parsen/Ausführen zu unbeabsichtigtem Verhalten führen können.",
    "JSON-Security-Prevention-027": "Um diese Risiken zu mindern, bereinigen Sie Benutzereingaben immer und verwenden Sie Bibliotheken, die JSON sicher analysieren, ohne seinen Inhalt auszuführen (wie das in JavaScript integrierte JSON.parse()). Vermeiden Sie außerdem die Verwendung von eval() zum Parsen von JSON.",
    "JSON-Serialization-016": "Was ist JSON-Serialisierung und -Deserialisierung?",
    "JSON-Serialization-Def-017": "Bei der JSON-Serialisierung handelt es sich um den Prozess der Konvertierung eines JavaScript-Objekts in einen JSON-String, während es sich bei der Deserialisierung um das Gegenteil handelt, bei dem ein JSON-String wieder in ein JavaScript-Objekt umgewandelt wird.",
    "JSON-Serialization-W3Schools": "JSON-Serialisierung auf W3Schools",
    "JSON-Syntax-004": "Was ist die grundlegende Syntax von JSON?",
    "JSON-Syntax-Example-f005": "Ein JSON-Objekt besteht aus Schlüssel-Wert-Paaren, die in geschweifte Klammern {0} eingeschlossen sind. Jeder Schlüssel muss eine in doppelte Anführungszeichen eingeschlossene Zeichenfolge sein, gefolgt von einem Doppelpunkt und seinem Wert.",
    "JSON-Syntax-Reference": "MDN-Webdokumente auf JSON",
    "JSON-Value-Types-006": "Werte können Zeichenfolgen, Zahlen, boolesche Werte und Arrays sein (in eckigen Klammern eingeschlossen).",
    "JSON-vs-XML-010": "Wie schneidet JSON im Vergleich zu XML ab?",
    "JSON-vs-XML-Article": "Vergleich von JSON und XML",
    "MDN-JSON-in-JavaScript": "MDN-Webdokumente – Arbeiten mit JSON",
    "OWASP-JSON-Injection": "OWASP – JSON-Injektion",
    "XML-Advantages-012": "XML bietet mehr Strukturflexibilität und unterstützt Namespaces, was für komplexe Dokumentstrukturen und systemübergreifende Interoperabilität von Vorteil sein kann."
}