{
  "result": "Below is the TypeScript version of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` has been added to the `ExtractURLs` class, following the pattern of the provided example.\n2. The description of the code's function has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function as per the example.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class ExtractURLs that extends the Operation class. It is used to extract URLs from a given string input using a regular expression. It provides options to display the total number of URLs found, sort the results, and ensure uniqueness.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { search, URL_REGEX } from \"../lib/Extract.mjs\";\nimport { caseInsensitiveSort } from \"../lib/Sort.mjs\";\n\n/**\n * Extract URLs operation\n */\nclass ExtractURLs extends Operation {\n  /**\n   * ExtractURLs constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"extractURLs.name\", \"Extract URLs\");\n    this.module = \"Regex\";\n    this.description = Dot(\n      \"extractURLs.desc\",\n      \"Extracts Uniform Resource Locators (URLs) from the input. The protocol (http, ftp etc.) is required otherwise there will be far too many false positives.\"\n    );\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"extractURLs.args.displayTotal\", \"Display total\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"extractURLs.args.sort\", \"Sort\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"extractURLs.args.unique\", \"Unique\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input: string, args: any[]) {\n    const [displayTotal, sort, unique] = args;\n    const results = search(\n      input,\n      URL_REGEX,\n      null,\n      sort ? caseInsensitiveSort : null,\n      unique,\n    );\n\n    if (displayTotal) {\n      return Dot(\"extractURLs.run.displayTotal\", `Total found: {0}\\n\\n{1}`, [results.length, results.join(\"\\n\")]);\n    } else {\n      return results.join(\"\\n\");\n    }\n  }\n\n  /**\n   * Get operation details\n   */\n  public getOptDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: '',\n      nousenouseID: 'extractURLs',\n      optName: Dot(\"extractURLs.optName\", \"Extract URLs\"),\n      optDescription: Dot(\n        \"extractURLs.optDesc\",\n        \"This operation extracts URLs from the given input.\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default ExtractURLs;\n```\n\nPlease note that the `Dot` function is not a standard TypeScript or JavaScript function, and it is assumed to be a custom function that you would like to use for internationalization or some other purpose. The `getOptDetail` method has been added with placeholders for `exampleInput` and `exampleOutput` as you did not provide actual examples. The `optDescription` and other fields have been filled according to the context of the `ExtractURLs` class.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript version of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` has been added to the `ExtractURLs` class, following the pattern of the provided example.\n2. The description of the code's function has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function as per the example.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class ExtractURLs that extends the Operation class. It is used to extract URLs from a given string input using a regular expression. It provides options to display the total number of URLs found, sort the results, and ensure uniqueness.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { search, URL_REGEX } from \"../lib/Extract.mjs\";\nimport { caseInsensitiveSort } from \"../lib/Sort.mjs\";\n\n/**\n * Extract URLs operation\n */\nclass ExtractURLs extends Operation {\n  /**\n   * ExtractURLs constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"extractURLs.name\", \"Extract URLs\");\n    this.module = \"Regex\";\n    this.description = Dot(\n      \"extractURLs.desc\",\n      \"Extracts Uniform Resource Locators (URLs) from the input. The protocol (http, ftp etc.) is required otherwise there will be far too many false positives.\"\n    );\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"extractURLs.args.displayTotal\", \"Display total\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"extractURLs.args.sort\", \"Sort\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"extractURLs.args.unique\", \"Unique\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input: string, args: any[]) {\n    const [displayTotal, sort, unique] = args;\n    const results = search(\n      input,\n      URL_REGEX,\n      null,\n      sort ? caseInsensitiveSort : null,\n      unique,\n    );\n\n    if (displayTotal) {\n      return Dot(\"extractURLs.run.displayTotal\", `Total found: {0}\\n\\n{1}`, [results.length, results.join(\"\\n\")]);\n    } else {\n      return results.join(\"\\n\");\n    }\n  }\n\n  /**\n   * Get operation details\n   */\n  public getOptDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: '',\n      nousenouseID: 'extractURLs',\n      optName: Dot(\"extractURLs.optName\", \"Extract URLs\"),\n      optDescription: Dot(\n        \"extractURLs.optDesc\",\n        \"This operation extracts URLs from the given input.\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default ExtractURLs;\n```\n\nPlease note that the `Dot` function is not a standard TypeScript or JavaScript function, and it is assumed to be a custom function that you would like to use for internationalization or some other purpose. The `getOptDetail` method has been added with placeholders for `exampleInput` and `exampleOutput` as you did not provide actual examples. The `optDescription` and other fields have been filled according to the context of the `ExtractURLs` class.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713888492,
    "id": "8596361271937359059",
    "model": "glm-4",
    "request_id": "8596361271937359059",
    "usage": {
      "completion_tokens": 876,
      "prompt_tokens": 969,
      "total_tokens": 1845
    }
  }
}