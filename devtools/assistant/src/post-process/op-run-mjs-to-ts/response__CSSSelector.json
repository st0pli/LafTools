{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` has been added to the `CSSSelector` class, following the pattern of the provided example.\n2. The description at the top of the file has been updated to describe the functionality of the code.\n3. Natural text has been wrapped with the `Dot` function as required.\n4. The import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a CSSSelector class that extends the Operation class. It allows for the extraction of information from an HTML document using a CSS selector.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport xmldom from \"xmldom\";\nimport nwmatcher from \"nwmatcher\";\n\n/**\n * @author n1474335 [n1474335@gmail.com]\n * @copyright Crown Copyright 2016\n * @license Apache-2.0\n */\n\nclass CSSSelector extends Operation {\n  constructor() {\n    super();\n\n    this.name = Dot(\"cssSelector.name\", \"CSS selector\");\n    this.module = \"Code\";\n    this.description = Dot(\"cssSelector.desc\", \"Extract information from an HTML document with a CSS selector\");\n    this.infoURL = \"https://wikipedia.org/wiki/Cascading_Style_Sheets#Selector\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"cssSelector.arg1\", \"CSS selector\"),\n        type: \"string\",\n        value: \"\",\n      },\n      {\n        name: Dot(\"cssSelector.arg2\", \"Delimiter\"),\n        type: \"binaryShortString\",\n        value: \"\\\\n\",\n      },\n    ];\n  }\n\n  getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'cssSelector',\n      optName: Dot(\"cssSelector.optName\", \"Perform {0} Operation\", this.name),\n      optDescription: Dot(\n        \"cssSelector.optDesc\",\n        \"This operation extracts information using a {0} from an HTML document.\",\n        this.name\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    };\n  }\n\n  run(input: string, args: { name: string; type: string; value: string }[]): string {\n    const [query, delimiter] = args,\n      parser = new xmldom.DOMParser();\n    let dom, result;\n\n    if (!query.length || !input.length) {\n      return \"\";\n    }\n\n    try {\n      dom = parser.parseFromString(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"cssSelector.err1\", \"Invalid input HTML.\"));\n    }\n\n    try {\n      const matcher = nwmatcher({ document: dom });\n      result = matcher.select(query, dom);\n    } catch (err) {\n      throw new OperationError(\n        Dot(\"cssSelector.err2\", \"Invalid CSS Selector. Details:\\n{0}\", err.message)\n      );\n    }\n\n    const nodeToString = function (node) {\n      return node.toString();\n      // ... (rest of the function remains unchanged)\n    };\n\n    return result.map(nodeToString).join(delimiter);\n  }\n}\n\nexport default CSSSelector;\n```\n\nPlease note the following:\n- Natural text that is displayed to the user has been wrapped with the `Dot` function.\n- The `getOptDetail` method has been added to the `CSSSelector` class, following the pattern of providing an operation detail object.\n- The description at the top of the file has been filled out to describe the code's purpose.\n- Import statements have been left as is, as per the instructions.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` has been added to the `CSSSelector` class, following the pattern of the provided example.\n2. The description at the top of the file has been updated to describe the functionality of the code.\n3. Natural text has been wrapped with the `Dot` function as required.\n4. The import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a CSSSelector class that extends the Operation class. It allows for the extraction of information from an HTML document using a CSS selector.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport xmldom from \"xmldom\";\nimport nwmatcher from \"nwmatcher\";\n\n/**\n * @author n1474335 [n1474335@gmail.com]\n * @copyright Crown Copyright 2016\n * @license Apache-2.0\n */\n\nclass CSSSelector extends Operation {\n  constructor() {\n    super();\n\n    this.name = Dot(\"cssSelector.name\", \"CSS selector\");\n    this.module = \"Code\";\n    this.description = Dot(\"cssSelector.desc\", \"Extract information from an HTML document with a CSS selector\");\n    this.infoURL = \"https://wikipedia.org/wiki/Cascading_Style_Sheets#Selector\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"cssSelector.arg1\", \"CSS selector\"),\n        type: \"string\",\n        value: \"\",\n      },\n      {\n        name: Dot(\"cssSelector.arg2\", \"Delimiter\"),\n        type: \"binaryShortString\",\n        value: \"\\\\n\",\n      },\n    ];\n  }\n\n  getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'cssSelector',\n      optName: Dot(\"cssSelector.optName\", \"Perform {0} Operation\", this.name),\n      optDescription: Dot(\n        \"cssSelector.optDesc\",\n        \"This operation extracts information using a {0} from an HTML document.\",\n        this.name\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    };\n  }\n\n  run(input: string, args: { name: string; type: string; value: string }[]): string {\n    const [query, delimiter] = args,\n      parser = new xmldom.DOMParser();\n    let dom, result;\n\n    if (!query.length || !input.length) {\n      return \"\";\n    }\n\n    try {\n      dom = parser.parseFromString(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"cssSelector.err1\", \"Invalid input HTML.\"));\n    }\n\n    try {\n      const matcher = nwmatcher({ document: dom });\n      result = matcher.select(query, dom);\n    } catch (err) {\n      throw new OperationError(\n        Dot(\"cssSelector.err2\", \"Invalid CSS Selector. Details:\\n{0}\", err.message)\n      );\n    }\n\n    const nodeToString = function (node) {\n      return node.toString();\n      // ... (rest of the function remains unchanged)\n    };\n\n    return result.map(nodeToString).join(delimiter);\n  }\n}\n\nexport default CSSSelector;\n```\n\nPlease note the following:\n- Natural text that is displayed to the user has been wrapped with the `Dot` function.\n- The `getOptDetail` method has been added to the `CSSSelector` class, following the pattern of providing an operation detail object.\n- The description at the top of the file has been filled out to describe the code's purpose.\n- Import statements have been left as is, as per the instructions.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713887007,
    "id": "8596355946177821503",
    "model": "glm-4",
    "request_id": "8596355946177821503",
    "usage": {
      "completion_tokens": 913,
      "prompt_tokens": 1114,
      "total_tokens": 2027
    }
  }
}