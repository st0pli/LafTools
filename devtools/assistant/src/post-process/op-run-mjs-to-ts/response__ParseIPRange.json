{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the requested changes applied:\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This class provides functionality to parse IP ranges, supporting both IPv4 and IPv6, and can provide network information and enumerate IP addresses within the range.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport {\n  ipv4CidrRange,\n  ipv4HyphenatedRange,\n  ipv4ListedRange,\n  ipv6CidrRange,\n  ipv6HyphenatedRange,\n  ipv6ListedRange,\n} from \"../lib/IP.mjs\";\n\n/**\n * Parse IP range operation\n */\nclass ParseIPRange extends Operation {\n  /**\n   * ParseIPRange constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"iprange.name\", \"Parse IP range\");\n    this.module = \"Default\";\n    this.description = Dot(\n      \"iprange.desc\",\n      \"Given a CIDR range (e.g. <code>10.0.0.0/24</code>), hyphenated range (e.g. <code>10.0.0.0 - 10.0.1.0</code>), or a list of IPs and/or CIDR ranges (separated by a new line), this operation provides network information and enumerates all IP addresses in the range.<br><br>IPv6 is supported but will not be enumerated.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Subnetwork\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"iprange.arg1\", \"Include network info\"),\n        type: \"boolean\",\n        value: true,\n      },\n      {\n        name: Dot(\"iprange.arg2\", \"Enumerate IP addresses\"),\n        type: \"boolean\",\n        value: true,\n      },\n      {\n        name: Dot(\"iprange.arg3\", \"Allow large queries\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input: string, args: any[]) {\n    const [includeNetworkInfo, enumerateAddresses, allowLargeList] = args;\n\n    // ... rest of the run method implementation remains unchanged ...\n\n    // Natural text for user\n    const invalidInputError = Dot(\n      \"iprange.error\",\n      \"Invalid input.\\n\\nEnter either a CIDR range (e.g. 10.0.0.0/24) or a hyphenated range (e.g. 10.0.0.0 - 10.0.1.0). IPv6 also supported.\"\n    );\n\n    // ... rest of the run method implementation remains unchanged ...\n\n    // Example usage of Dot function for error message\n    throw new OperationError(invalidInputError);\n  }\n\n  // New method as per the requirement\n  public getIPRangeDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'iprange',\n      optName: Dot(\"iprange.optName\", \"Generate IP Range Information\"),\n      optDescription: Dot(\n        \"iprange.optDesc\",\n        \"This operation parses and provides information for the given IP range.\"\n      ),\n      exampleInput: \"10.0.0.0/24\", // Example input\n      exampleOutput: \"<Network information and enumerated IP addresses>\", // Placeholder for actual output\n    };\n  }\n}\n\nexport default ParseIPRange;\n```\n\nNatural text wrapped with `Dot` function:\n- \"Parse IP range\"\n- \"Given a CIDR range (e.g. <code>10.0.0.0/24</code>), hyphenated range (e.g. <code>10.0.0.0 - 10.0.1.0</code>), or a list of IPs and/or CIDR ranges (separated by a new line), this operation provides network information and enumerates all IP addresses in the range.<br><br>IPv6 is supported but will not be enumerated.\"\n- \"Include network info\"\n- \"Enumerate IP addresses",
  "response": {
    "choices": [
      {
        "finish_reason": "length",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the requested changes applied:\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This class provides functionality to parse IP ranges, supporting both IPv4 and IPv6, and can provide network information and enumerate IP addresses within the range.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport {\n  ipv4CidrRange,\n  ipv4HyphenatedRange,\n  ipv4ListedRange,\n  ipv6CidrRange,\n  ipv6HyphenatedRange,\n  ipv6ListedRange,\n} from \"../lib/IP.mjs\";\n\n/**\n * Parse IP range operation\n */\nclass ParseIPRange extends Operation {\n  /**\n   * ParseIPRange constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"iprange.name\", \"Parse IP range\");\n    this.module = \"Default\";\n    this.description = Dot(\n      \"iprange.desc\",\n      \"Given a CIDR range (e.g. <code>10.0.0.0/24</code>), hyphenated range (e.g. <code>10.0.0.0 - 10.0.1.0</code>), or a list of IPs and/or CIDR ranges (separated by a new line), this operation provides network information and enumerates all IP addresses in the range.<br><br>IPv6 is supported but will not be enumerated.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Subnetwork\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"iprange.arg1\", \"Include network info\"),\n        type: \"boolean\",\n        value: true,\n      },\n      {\n        name: Dot(\"iprange.arg2\", \"Enumerate IP addresses\"),\n        type: \"boolean\",\n        value: true,\n      },\n      {\n        name: Dot(\"iprange.arg3\", \"Allow large queries\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input: string, args: any[]) {\n    const [includeNetworkInfo, enumerateAddresses, allowLargeList] = args;\n\n    // ... rest of the run method implementation remains unchanged ...\n\n    // Natural text for user\n    const invalidInputError = Dot(\n      \"iprange.error\",\n      \"Invalid input.\\n\\nEnter either a CIDR range (e.g. 10.0.0.0/24) or a hyphenated range (e.g. 10.0.0.0 - 10.0.1.0). IPv6 also supported.\"\n    );\n\n    // ... rest of the run method implementation remains unchanged ...\n\n    // Example usage of Dot function for error message\n    throw new OperationError(invalidInputError);\n  }\n\n  // New method as per the requirement\n  public getIPRangeDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'iprange',\n      optName: Dot(\"iprange.optName\", \"Generate IP Range Information\"),\n      optDescription: Dot(\n        \"iprange.optDesc\",\n        \"This operation parses and provides information for the given IP range.\"\n      ),\n      exampleInput: \"10.0.0.0/24\", // Example input\n      exampleOutput: \"<Network information and enumerated IP addresses>\", // Placeholder for actual output\n    };\n  }\n}\n\nexport default ParseIPRange;\n```\n\nNatural text wrapped with `Dot` function:\n- \"Parse IP range\"\n- \"Given a CIDR range (e.g. <code>10.0.0.0/24</code>), hyphenated range (e.g. <code>10.0.0.0 - 10.0.1.0</code>), or a list of IPs and/or CIDR ranges (separated by a new line), this operation provides network information and enumerates all IP addresses in the range.<br><br>IPv6 is supported but will not be enumerated.\"\n- \"Include network info\"\n- \"Enumerate IP addresses",
          "role": "assistant"
        }
      }
    ],
    "created": 1713892131,
    "id": "8596355980537526606",
    "model": "glm-4",
    "request_id": "8596355980537526606",
    "usage": {
      "completion_tokens": 1024,
      "prompt_tokens": 2025,
      "total_tokens": 3049
    }
  }
}