{
    "a4s6x": "Hur fungerar Base32?",
    "a8b7z": "Följaktligen är utfyllnad endast nödvändig om den sista gruppen av bitar som kodas inte är delbar med 40 bitar (eftersom 8 Base32-tecken representerar 40 bitar). Utfyllnad kommer att bestå av noll till sex '=' tecken i slutet av den kodade strängen.",
    "b8g2k": "Användningsscenarier för Base32",
    "c0v2p": "Vanliga operationer med Base32",
    "d1x7v": "Ett annat exempel är i Git, där hashade objekt ibland lagras i Base32-format för att undvika problem med radslut och filnamnsbegränsningar. Dessutom använder HashiCorp Vault Base32 för nyckelhärledning.",
    "d9w7m": "Dessutom, eftersom den bara använder stora bokstäver, kan den inte använda alla möjliga kombinationer av skiftlägeskänslighet som en extra säkerhetsåtgärd som Base64 ibland gör med fallvikning under avkodning.",
    "e5c7r": "Base32 är ett binärt-till-text-kodningsschema som representerar data i en ASCII-sträng med en delmängd på 32 tecken. Den är designad för att vara läsbar och URL-säker.",
    "f0q4w": "Ett populärt användningsscenario är att generera hemliga nycklar för tvåfaktorsautentisering (2FA), där tjänster som Google Authenticator och Yubikey använder Base32-kodade hemligheter.",
    "f5a0s": "Dessutom producerar Base32 längre utdata men kan vara mer lämpad för specifika applikationer som filnamn på grund av dess brist på specialtecken som kan komma i konflikt med filsystemregler.",
    "g8r3e": "Den största nackdelen med Base32 är dess relativt dåliga utrymmeseffektivitet; den utökar indata med cirka 25 % mer än Base64. Detta innebär att det tar upp mer lagringsutrymme eller bandbredd för samma mängd kodad data.",
    "h4e1b": "Det är också användbart för situationer där skiftlägeskänsliga alfanumeriska strängar är lättare att hantera än hexadecimala eller base64, som kan innehålla icke-alfanumeriska tecken som kan orsaka problem i vissa sammanhang (som webbadresser eller filnamn).",
    "h9j3m": "Vaddering i Base32",
    "i9o7k": "Fördelar med Base32 framför Base64",
    "j1b5k": "De vanligaste operationerna som involverar Base32 inkluderar kodning av binär data till en Base32-sträng och avkodning av en Base32-sträng tillbaka till dess ursprungliga binära format.",
    "k7g0n": "I Base32 mappas var 5:e bit av indata till ett av de 32 tecknen från uppsättningen 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='.",
    "l1p9z": "Vad är Base32?",
    "m6d8b": "Varje 5-bitars värde representeras av ett enda tecken, vilket möjliggör effektiv kodning och avkodning för system som föredrar att arbeta med oktetter (8-bitars enheter).",
    "n3e7r": "Historien om Base32",
    "p9s5t": "Base32 utvecklades av Douglas Crockford, känd för sina bidrag till JavaScript, 2001. Det skapades som ett mer tillförlitligt alternativ till befintliga kodningar som Base64, speciellt för situationer som kräver textbaserade representationer av binär data.",
    "q2w5m": "Syftet med att använda Base32?",
    "r6tq9z": "<b>Exempel:</b> För att koda 'TEST12345' i Base32 kan du använda bibliotek som base32-encode i Node.js, eller inbyggda funktioner på andra språk som Pythons base64.b32encode.",
    "s5t0n": "Utfyllnad i Base32 innebär att lägga till '='-tecken för att säkerställa att den sista biten av kodad data fortfarande innehåller en multipel av 8 bitar. Men till skillnad från Base64 är Base32-utfyllnad minimal eftersom varje Base32-tecken redan kodar 5 bitar.",
    "t8z1v": "När det inte finns tillräckligt med bitar kvar i slutet för att fylla en hel 5-bitars grupp, läggs utfyllnadstecknen '=' till. Till exempel kräver en byte två Base32-tecken, och en 3-byte-sekvens skulle behöva fyra Base32-tecken.",
    "u3j9p": "Base32 används ofta när du behöver en kompakt textrepresentation av binär data som kan skrivas eller skrivas ut utan att förlora information, som i filintegritetskontroller, geocaching och säker lösenordsgenerering.",
    "y6t1n": "Nackdelar med Base32",
    "z2x8c": "Base32 har färre visuella oklarheter eftersom den bara använder stora bokstäver och siffror, vilket gör det lättare att läsa och transkribera för hand eller via telefon jämfört med Base64 som innehåller '+', '/' och gemener.",
    "z6m1c": "Senare varianter som z-base-32 introducerades för att förbättra användbarheten och ersatte vissa mindre minnesvärda karaktärer med andra, men Crockfords ursprungliga specifikation är fortfarande allmänt använd idag."
}