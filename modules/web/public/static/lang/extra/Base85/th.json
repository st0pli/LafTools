{
    "c1p4b": "จากนั้นเลขทศนิยมแต่ละตัวจะถูกแปลงเป็นลำดับที่ไม่ซ้ำกันซึ่งประกอบด้วยอักขระ Base85 ห้าตัว หากส่วนท้ายเหลือน้อยกว่าสี่ไบต์ อาจมีการใช้การเสริม",
    "d7w2e": "Base85 ทำงานโดยการแบ่งข้อมูลอินพุตออกเป็นกลุ่มๆ ละ 4 ไบต์ และแปลงแต่ละกลุ่มให้เป็นเลขทศนิยมระหว่าง 0 ถึง 2^32-1",
    "f9t1z": "Base85 ได้รับการพัฒนาในตอนแรกเพื่อแสดงข้อมูลไบนารีในเอกสาร PostScript อย่างมีประสิทธิภาพเพื่ออัตราส่วนการบีบอัดที่ดีขึ้น",
    "g3h5s": "Base85 ทำงานอย่างไร?",
    "j5s7r": "ฉันจะเข้ารหัส / ถอดรหัสด้วย Base85 ใน JavaScript ได้อย่างไร",
    "k2em5e": "ส่งผลให้สตริงเอาต์พุตสั้นลงสำหรับข้อมูลอินพุตในปริมาณเท่ากัน ซึ่งอาจเป็นประโยชน์ในสถานการณ์ที่การลดขนาดเป็นสิ่งสำคัญ",
    "p8eq9n": "คุณสามารถใช้ไลบรารีเช่น 'base85' หรือ 'ascii85' สำหรับการเข้ารหัสและถอดรหัส Base85 ใน JavaScript",
    "q2n3r": "ปัจจุบันมีการนำไปใช้ในแอปพลิเคชันต่างๆ ที่ประสิทธิภาพพื้นที่และความสามารถในการอ่านเป็นสิ่งสำคัญ เช่น เอกสาร PDF และโปรโตคอลเครือข่ายบางอย่าง",
    "r9qn8v": "ข้อได้เปรียบหลักของ Base85 คือประสิทธิภาพพื้นที่ที่ดีขึ้นเนื่องจากชุดอักขระที่ใหญ่ขึ้น (85 เทียบกับ 64 ใน Base64 หรือ 32 ใน Base32)",
    "u1i2b": "ข้อดีของการใช้ Base85 เหนือ Base64 หรือ Base32 คืออะไร",
    "v4k6r": "โดยจะเข้ารหัสข้อมูลในรูปแบบที่กะทัดรัดกว่าเมื่อเทียบกับ Base64 หรือ Base32 โดยใช้ชุดอักขระที่ใหญ่กว่า",
    "w1x4k": "ใช่ มีหลายรูปแบบ รวมถึง Ascii85 (ใช้ใน PostScript และ PDF), Z85 (ZeroMQ) และ UUencode (รูปแบบเก่า) แต่ละคนมีชุดตัวละครและกฎที่แตกต่างกันเล็กน้อย",
    "x9n1b": "Base85 เป็นรูปแบบการเข้ารหัสที่แสดงข้อมูลไบนารีโดยใช้ชุดอักขระ ASCII ที่พิมพ์ได้ 85 ตัว",
    "y6m8k": "เหตุใด Base85 จึงถูกสร้างขึ้น?",
    "z2t7m": "Base85 คืออะไร?",
    "z5m6t": "ตัวอย่างการใช้งาน: `const base85 = need('base85'); const เข้ารหัส = base85.encode('ข้อมูลของคุณ'); const ถอดรหัส = base85.decode (เข้ารหัส); `",
    "z9t7p": "มี Base85 รุ่นพิเศษใดบ้าง?"
}