{
    "MD6-AlgorithmDetails-010": "MD6算法详细信息",
    "MD6-ComparisonSHA3-020": "MD6 与 SHA-3 (Keccak) 相比如何？",
    "MD6-Def-002": "MD6（消息摘要算法 6）是由 Ronald Rivest 于 2008 年设计的一种加密哈希函数。它是 MD 系列的演变，提供从 128 位到 512 位的可变输出大小。",
    "MD6-FAQ-001": "MD6是什么？",
    "MD6-FutureDevelopments-028": "MD6 未来是否有任何开发或改进计划？",
    "MD6-FutureUnknown-029": "截至目前，还没有任何有关正在进行的开发或改进 MD6 算法的计划的公开信息。密码学研究不断发展，可能会出现新的算法来解决新出现的威胁或要求。",
    "MD6-History-004": "MD6 是如何开发的以及它的诞生的原因是什么？",
    "MD6-Operation-007": "MD6运算是如何进行的？",
    "MD6-Origin-005": "MD6 的创建是为了应对当时广泛使用的 MD5 和 SHA-1 中发现的漏洞。它的目的是提供一种更安全的替代方案，并提高输出大小的灵活性。",
    "MD6-PKI-Alternatives-027": "对于 PKI 和数字签名应用程序，通常使用 RSA/SHA-256 或具有 SHA-2 或 SHA-3 变体的 ECDSA 等标准。这些都经过了广泛的分析，并在密码学界建立了信任。",
    "MD6-PKI-Considerations-026": "虽然 MD6 旨在提供比 MD5 等早期哈希函数更强的安全性，但由于其相对新颖且缺乏广泛的加密社区接受度，它尚未广泛应用于 PKI 或数字签名方案。",
    "MD6-Process-008": "MD6 通过一系列应用于树状结构的压缩函数来处理输入消息。该算法可以并行运行，这有助于提高其针对较大输入的性能。",
    "MD6-Purpose-003": "与之前的版本相比，MD6 旨在提供强大的安全功能和改进的性能，使其适用于需要防冲突散列和消息完整性检查的各种应用程序。",
    "MD6-Rounds-009": "MD6树中的每个节点都会经历多轮混合操作，包括模加法、按位异或和非线性排列。最终的根节点值表示输入消息的哈希摘要。",
    "MD6-SecurityUpgrade-006": "MD6 的设计建立在基于树的哈希概念之上，使其能够比以前的 MD 算法提供更好的原像和碰撞攻击保护，同时还为大型数据集提供更高的吞吐量。",
    "MD6-StayingCurrent-030": "在为任何应用程序选择哈希函数时，必须了解最新的研究成果和加密专家的建议，尤其是随着加密安全形势的不断发展。",
    "MD6-UseInPKI-025": "MD6 可以用于公钥基础设施 (PKI) 或数字签名吗？",
    "MD6-vs-SHA3-Adoption-023": "SHA-3 已被采纳为 NIST 官方标准，并因其强大的安全性和性能而得到广泛应用。 MD6 尽管理论上是安全的，但尚未达到同等水平的采用或标准化水平。",
    "MD6-vs-SHA3-DiffDesign-021": "MD6 和 SHA-3 的设计都考虑到了安全性，但它们采用了不同的哈希技术。 MD6 使用基于树的设计来提高并行性，而 SHA-3 基于海绵结构。",
    "MD6-vs-SHA3-Flexibility-022": "MD6 提供可变的输出长度，这对于需要自定义哈希大小的应用程序来说非常有利。 SHA-3 还支持可变输出长度，尽管其最常见的变体 SHAKE 通过任意长度输出提供了更大的灵活性。",
    "SHA3-NISTStandard-024": "SHA-3 标准化"
}