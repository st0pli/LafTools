{
  "result": "Below is the TypeScript version of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` has been added to the `DNSOverHTTPS` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function.\n4. Import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The DNSOverHTTPS class provides a DNS lookup operation using the DNS over HTTPS protocol. It supports various DNS resolvers and request types, and allows for extraction of answer data only if needed.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\n\n/**\n * DNS over HTTPS operation\n */\nclass DNSOverHTTPS extends Operation {\n  /**\n   * DNSOverHTTPS constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"dnsOverHttps.name\", \"DNS over HTTPS\");\n    this.module = \"Default\";\n    this.description = [\n      Dot(\"dnsOverHttps.desc.1\", \"Takes a single domain name and performs a DNS lookup using DNS over HTTPS.\"),\n      \"<br><br>\",\n      Dot(\"dnsOverHttps.desc.2\", \"By default, Cloudflare and Google DNS over HTTPS services are supported.\"),\n      \"<br><br>\",\n      Dot(\"dnsOverHttps.desc.3\", \"Can be used with any service that supports the GET parameters <code>name</code> and <code>type</code>.\"),\n    ].join(\"\\n\");\n    this.infoURL = \"https://wikipedia.org/wiki/DNS_over_HTTPS\";\n    this.inputType = \"string\";\n    this.outputType = \"JSON\";\n    this.manualBake = true;\n    this.args = [\n      {\n        name: Dot(\"dnsOverHttps.arg.resolver\", \"Resolver\"),\n        type: \"editableOption\",\n        value: [\n          { name: \"Google\", value: \"https://dns.google.com/resolve\" },\n          { name: \"Cloudflare\", value: \"https://cloudflare-dns.com/dns-query\" },\n        ],\n      },\n      {\n        name: Dot(\"dnsOverHttps.arg.requestType\", \"Request Type\"),\n        type: \"option\",\n        value: [\n          \"A\",\n          \"AAAA\",\n          \"ANAME\",\n          \"CERT\",\n          \"CNAME\",\n          \"DNSKEY\",\n          \"HTTPS\",\n          \"IPSECKEY\",\n          \"LOC\",\n          \"MX\",\n          \"NS\",\n          \"OPENPGPKEY\",\n          \"PTR\",\n          \"RRSIG\",\n          \"SIG\",\n          \"SOA\",\n          \"SPF\",\n          \"SRV\",\n          \"SSHFP\",\n          \"TA\",\n          \"TXT\",\n          \"URI\",\n          \"ANY\",\n        ],\n      },\n      {\n        name: Dot(\"dnsOverHttps.arg.answerData\", \"Answer Data Only\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"dnsOverHttps.arg.disableDNSSEC\", \"Disable DNSSEC validation\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {JSON}\n   */\n  run(input: string, args: any[]) {\n    // ... (run method implementation remains unchanged)\n  }\n\n  /**\n   * Get operation detail\n   */\n  public getOptDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        module: \"Crypto\",\n        description: Dot(\"dnsOverHttps.optDetail.desc\", \"DNS over HTTPS is a protocol for performing DNS queries securely over HTTPS.\"),\n        infoURL: this.infoURL,\n        inputType: this.inputType,\n        outputType: this.outputType,\n        flowControl: false,\n        manualBake: this.manualBake,\n        args: this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'dnsOverHttps',\n      optName: Dot(\"dnsOverHttps.optDetail.name\", \"Perform {0} DNS Lookup\", \"DNS over HTTPS\"),\n      optDescription: Dot(\n        \"dnsOverHttps.optDetail.optDesc\",\n        \"This operation performs a DNS lookup using the {0} protocol.\",\n        \"DNS over HTTPS\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"<JSON object>\", // Assuming the output is a JSON object\n    };\n  }\n}\n\n// ... (extractData function remains unchanged)\n\nexport default DNSOverHTTPS;\n```\n\nPlease note that the `exampleOutput` is wrapped in angle brackets as",
  "response": {
    "choices": [
      {
        "finish_reason": "length",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript version of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` has been added to the `DNSOverHTTPS` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function.\n4. Import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The DNSOverHTTPS class provides a DNS lookup operation using the DNS over HTTPS protocol. It supports various DNS resolvers and request types, and allows for extraction of answer data only if needed.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\n\n/**\n * DNS over HTTPS operation\n */\nclass DNSOverHTTPS extends Operation {\n  /**\n   * DNSOverHTTPS constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"dnsOverHttps.name\", \"DNS over HTTPS\");\n    this.module = \"Default\";\n    this.description = [\n      Dot(\"dnsOverHttps.desc.1\", \"Takes a single domain name and performs a DNS lookup using DNS over HTTPS.\"),\n      \"<br><br>\",\n      Dot(\"dnsOverHttps.desc.2\", \"By default, Cloudflare and Google DNS over HTTPS services are supported.\"),\n      \"<br><br>\",\n      Dot(\"dnsOverHttps.desc.3\", \"Can be used with any service that supports the GET parameters <code>name</code> and <code>type</code>.\"),\n    ].join(\"\\n\");\n    this.infoURL = \"https://wikipedia.org/wiki/DNS_over_HTTPS\";\n    this.inputType = \"string\";\n    this.outputType = \"JSON\";\n    this.manualBake = true;\n    this.args = [\n      {\n        name: Dot(\"dnsOverHttps.arg.resolver\", \"Resolver\"),\n        type: \"editableOption\",\n        value: [\n          { name: \"Google\", value: \"https://dns.google.com/resolve\" },\n          { name: \"Cloudflare\", value: \"https://cloudflare-dns.com/dns-query\" },\n        ],\n      },\n      {\n        name: Dot(\"dnsOverHttps.arg.requestType\", \"Request Type\"),\n        type: \"option\",\n        value: [\n          \"A\",\n          \"AAAA\",\n          \"ANAME\",\n          \"CERT\",\n          \"CNAME\",\n          \"DNSKEY\",\n          \"HTTPS\",\n          \"IPSECKEY\",\n          \"LOC\",\n          \"MX\",\n          \"NS\",\n          \"OPENPGPKEY\",\n          \"PTR\",\n          \"RRSIG\",\n          \"SIG\",\n          \"SOA\",\n          \"SPF\",\n          \"SRV\",\n          \"SSHFP\",\n          \"TA\",\n          \"TXT\",\n          \"URI\",\n          \"ANY\",\n        ],\n      },\n      {\n        name: Dot(\"dnsOverHttps.arg.answerData\", \"Answer Data Only\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"dnsOverHttps.arg.disableDNSSEC\", \"Disable DNSSEC validation\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {JSON}\n   */\n  run(input: string, args: any[]) {\n    // ... (run method implementation remains unchanged)\n  }\n\n  /**\n   * Get operation detail\n   */\n  public getOptDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        module: \"Crypto\",\n        description: Dot(\"dnsOverHttps.optDetail.desc\", \"DNS over HTTPS is a protocol for performing DNS queries securely over HTTPS.\"),\n        infoURL: this.infoURL,\n        inputType: this.inputType,\n        outputType: this.outputType,\n        flowControl: false,\n        manualBake: this.manualBake,\n        args: this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'dnsOverHttps',\n      optName: Dot(\"dnsOverHttps.optDetail.name\", \"Perform {0} DNS Lookup\", \"DNS over HTTPS\"),\n      optDescription: Dot(\n        \"dnsOverHttps.optDetail.optDesc\",\n        \"This operation performs a DNS lookup using the {0} protocol.\",\n        \"DNS over HTTPS\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"<JSON object>\", // Assuming the output is a JSON object\n    };\n  }\n}\n\n// ... (extractData function remains unchanged)\n\nexport default DNSOverHTTPS;\n```\n\nPlease note that the `exampleOutput` is wrapped in angle brackets as",
          "role": "assistant"
        }
      }
    ],
    "created": 1713887676,
    "id": "8596361271937353147",
    "model": "glm-4",
    "request_id": "8596361271937353147",
    "usage": {
      "completion_tokens": 1024,
      "prompt_tokens": 1472,
      "total_tokens": 2496
    }
  }
}