{
  "result": "Below is the TypeScript (TS) version of the provided JavaScript code, with the requested modifications:\n\n1. I've added a new method `getOptDetail` to the `ImageHueSaturationLightness` class, based on the structure of the provided example.\n2. I've provided an English description of the code's function and purpose at the top of the file.\n3. Natural text intended for the user has been wrapped in the `Dot` function.\n4. Import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The ImageHueSaturationLightness class provides functionality to adjust the hue, saturation, and lightness of an image.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { isImage } from \"../lib/FileType.mjs\";\nimport { toBase64 } from \"../lib/Base64.mjs\";\nimport { isWorkerEnvironment } from \"../Utils.mjs\";\n// import jimp from \"jimp\";\nconst jimp = require(\"jimp\");\n\n/**\n * Adjusts the hue / saturation / lightness (HSL) values of an image.\n */\nclass ImageHueSaturationLightness extends Operation {\n  constructor() {\n    super();\n\n    this.name = Dot(\"imageHsl.name\", \"Image Hue/Saturation/Lightness\");\n    this.module = \"Image\";\n    this.description = Dot(\"imageHsl.desc\", \"Adjusts the hue / saturation / lightness (HSL) values of an image.\");\n    this.infoURL = \"\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.presentType = \"html\";\n    this.args = [\n      {\n        name: Dot(\"imageHsl.arg.hue\", \"Hue\"),\n        type: \"number\",\n        value: 0,\n        min: -360,\n        max: 360,\n      },\n      {\n        name: Dot(\"imageHsl.arg.saturation\", \"Saturation\"),\n        type: \"number\",\n        value: 0,\n        min: -100,\n        max: 100,\n      },\n      {\n        name: Dot(\"imageHsl.arg.lightness\", \"Lightness\"),\n        type: \"number\",\n        value: 0,\n        min: -100,\n        max: 100,\n      },\n    ];\n  }\n\n  async run(input: ArrayBuffer, args: [number, number, number]) {\n    const [hue, saturation, lightness] = args;\n\n    if (!isImage(input)) {\n      throw new OperationError(Dot(\"imageHsl.error.invalidType\", \"Invalid file type.\"));\n    }\n\n    let image;\n    try {\n      image = await jimp.read(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"imageHsl.error.load\", `Error loading image. (${err})`));\n    }\n    try {\n      if (hue !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"imageHsl.status.hue\", \"Changing image hue...\"));\n        image.colour([{ apply: \"hue\", params: [hue] }]);\n      }\n      if (saturation !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"imageHsl.status.saturation\", \"Changing image saturation...\"));\n        image.colour([{ apply: \"saturate\", params: [saturation] }]);\n      }\n      if (lightness !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"imageHsl.status.lightness\", \"Changing image lightness...\"));\n        image.colour([{ apply: \"lighten\", params: [lightness] }]);\n      }\n\n      let imageBuffer;\n      if (image.getMIME() === \"image/gif\") {\n        imageBuffer = await image.getBufferAsync(jimp.MIME_PNG);\n      } else {\n        imageBuffer = await image.getBufferAsync(jimp.AUTO);\n      }\n      return imageBuffer.buffer;\n    } catch (err) {\n      throw new OperationError(Dot(\"imageHsl.error.adjust\", `Error adjusting image hue / saturation / lightness. (${err})`));\n    }\n  }\n\n  present(data: ArrayBuffer): string {\n    if (!data.byteLength) return \"\";\n    const dataArray = new Uint8Array(data);\n\n    const type = isImage(dataArray);\n    if (!type) {\n      throw new OperationError(Dot(\"imageHsl.error.invalidType\", \"Invalid file type.\"));\n    }\n\n    return `<img src=\"data:${type};base64,${toBase64(dataArray)}\">`;\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't",
  "response": {
    "choices": [
      {
        "finish_reason": "length",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript (TS) version of the provided JavaScript code, with the requested modifications:\n\n1. I've added a new method `getOptDetail` to the `ImageHueSaturationLightness` class, based on the structure of the provided example.\n2. I've provided an English description of the code's function and purpose at the top of the file.\n3. Natural text intended for the user has been wrapped in the `Dot` function.\n4. Import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The ImageHueSaturationLightness class provides functionality to adjust the hue, saturation, and lightness of an image.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { isImage } from \"../lib/FileType.mjs\";\nimport { toBase64 } from \"../lib/Base64.mjs\";\nimport { isWorkerEnvironment } from \"../Utils.mjs\";\n// import jimp from \"jimp\";\nconst jimp = require(\"jimp\");\n\n/**\n * Adjusts the hue / saturation / lightness (HSL) values of an image.\n */\nclass ImageHueSaturationLightness extends Operation {\n  constructor() {\n    super();\n\n    this.name = Dot(\"imageHsl.name\", \"Image Hue/Saturation/Lightness\");\n    this.module = \"Image\";\n    this.description = Dot(\"imageHsl.desc\", \"Adjusts the hue / saturation / lightness (HSL) values of an image.\");\n    this.infoURL = \"\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.presentType = \"html\";\n    this.args = [\n      {\n        name: Dot(\"imageHsl.arg.hue\", \"Hue\"),\n        type: \"number\",\n        value: 0,\n        min: -360,\n        max: 360,\n      },\n      {\n        name: Dot(\"imageHsl.arg.saturation\", \"Saturation\"),\n        type: \"number\",\n        value: 0,\n        min: -100,\n        max: 100,\n      },\n      {\n        name: Dot(\"imageHsl.arg.lightness\", \"Lightness\"),\n        type: \"number\",\n        value: 0,\n        min: -100,\n        max: 100,\n      },\n    ];\n  }\n\n  async run(input: ArrayBuffer, args: [number, number, number]) {\n    const [hue, saturation, lightness] = args;\n\n    if (!isImage(input)) {\n      throw new OperationError(Dot(\"imageHsl.error.invalidType\", \"Invalid file type.\"));\n    }\n\n    let image;\n    try {\n      image = await jimp.read(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"imageHsl.error.load\", `Error loading image. (${err})`));\n    }\n    try {\n      if (hue !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"imageHsl.status.hue\", \"Changing image hue...\"));\n        image.colour([{ apply: \"hue\", params: [hue] }]);\n      }\n      if (saturation !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"imageHsl.status.saturation\", \"Changing image saturation...\"));\n        image.colour([{ apply: \"saturate\", params: [saturation] }]);\n      }\n      if (lightness !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"imageHsl.status.lightness\", \"Changing image lightness...\"));\n        image.colour([{ apply: \"lighten\", params: [lightness] }]);\n      }\n\n      let imageBuffer;\n      if (image.getMIME() === \"image/gif\") {\n        imageBuffer = await image.getBufferAsync(jimp.MIME_PNG);\n      } else {\n        imageBuffer = await image.getBufferAsync(jimp.AUTO);\n      }\n      return imageBuffer.buffer;\n    } catch (err) {\n      throw new OperationError(Dot(\"imageHsl.error.adjust\", `Error adjusting image hue / saturation / lightness. (${err})`));\n    }\n  }\n\n  present(data: ArrayBuffer): string {\n    if (!data.byteLength) return \"\";\n    const dataArray = new Uint8Array(data);\n\n    const type = isImage(dataArray);\n    if (!type) {\n      throw new OperationError(Dot(\"imageHsl.error.invalidType\", \"Invalid file type.\"));\n    }\n\n    return `<img src=\"data:${type};base64,${toBase64(dataArray)}\">`;\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't",
          "role": "assistant"
        }
      }
    ],
    "created": 1713890431,
    "id": "8596355911818049052",
    "model": "glm-4",
    "request_id": "8596355911818049052",
    "usage": {
      "completion_tokens": 1024,
      "prompt_tokens": 1432,
      "total_tokens": 2456
    }
  }
}