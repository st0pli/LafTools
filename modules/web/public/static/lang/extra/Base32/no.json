{
    "R_S7_CLAo": "Eksempel: For å kode 'TEST12345' i Base32, kan du bruke biblioteker som base32-encode i Node.js, eller innebygde funksjoner på andre språk som Pythons base64.b32encode.",
    "a4s6x": "Hvordan fungerer Base32?",
    "a8b7z": "Dermed er utfylling bare nødvendig hvis den siste gruppen av biter som kodes ikke er delelig med 40 biter (siden 8 Base32-tegn representerer 40 biter). Utfylling vil bestå av null til seks '='-tegn på slutten av den kodede strengen.",
    "b8g2k": "Bruksscenarier for Base32",
    "c0v2p": "Vanlige operasjoner med Base32",
    "d1x7v": "Et annet eksempel er i Git, hvor hashed-objekter noen ganger lagres i Base32-format for å unngå problemer med linjeavslutninger og filnavnsbegrensninger. HashiCorp Vault bruker også Base32 for nøkkelavledning.",
    "d9w7m": "Videre, fordi den bare bruker store bokstaver, kan den ikke bruke alle mulige kombinasjoner av store og små bokstaver som et ekstra sikkerhetstiltak som Base64 noen ganger gjør med saksfolding under dekoding.",
    "e5c7r": "Base32 er et binært-til-tekst-kodingsskjema som representerer data i en ASCII-streng ved bruk av et undersett på 32 tegn. Den er designet for å være lesbar og URL-sikker.",
    "f0q4w": "Et populært bruksscenario er å generere hemmelige nøkler for Two-Factor Authentication (2FA), der tjenester som Google Authenticator og Yubikey bruker Base32-kodede hemmeligheter.",
    "f5a0s": "I tillegg produserer Base32 lengre utdata, men kan være mer egnet for spesifikke applikasjoner som filnavn på grunn av mangelen på spesialtegn som kan komme i konflikt med filsystemregler.",
    "g8r3e": "Den største ulempen med Base32 er dens relativt dårlige plasseffektivitet; den utvider inndata med omtrent 25 % mer enn Base64. Dette betyr at det tar opp mer lagring eller båndbredde for samme mengde kodet data.",
    "h4e1b": "Det er også nyttig for situasjoner der bokstavsensitive alfanumeriske strenger er lettere å håndtere enn heksadesimale eller base64, som kan inneholde ikke-alfanumeriske tegn som kan forårsake problemer i visse sammenhenger (som URL-er eller filnavn).",
    "h9j3m": "Polstring i Base32",
    "i9o7k": "Fordeler med Base32 fremfor Base64",
    "j1b5k": "De vanligste operasjonene som involverer Base32 inkluderer koding av binære data til en Base32-streng og dekoding av en Base32-streng tilbake til det opprinnelige binære formatet.",
    "k7g0n": "I Base32 tilordnes hver 5. bit med inndata til ett av de 32 tegnene fra settet 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='.",
    "l1p9z": "Hva er Base32?",
    "m6d8b": "Hver 5-bits verdi er representert med et enkelt tegn, noe som tillater effektiv koding og dekoding for systemer som foretrekker å jobbe med oktetter (8-bits enheter).",
    "n3e7r": "Historien til Base32",
    "p9s5t": "Base32 ble utviklet av Douglas Crockford, kjent for sine bidrag til JavaScript, i 2001. Den ble laget som et mer pålitelig alternativ til eksisterende kodinger som Base64, spesielt for situasjoner som krever tekstbaserte representasjoner av binære data.",
    "q2w5m": "Hensikten med å bruke Base32?",
    "s5t0n": "Padding i Base32 innebærer å legge til '='-tegn for å sikre at den siste delen av kodet data fortsatt inneholder et multiplum på 8 biter. Imidlertid, i motsetning til Base64, er Base32-utfylling minimal fordi hvert Base32-tegn allerede koder for 5 biter.",
    "t8z1v": "Når det ikke er nok biter igjen på slutten til å fylle en hel 5-bits gruppe, legges utfyllingstegn '=' til. For eksempel krever en byte to Base32-tegn, og en 3-byte-sekvens vil trenge fire Base32-tegn.",
    "u3j9p": "Base32 brukes ofte når du trenger en kompakt tekstlig representasjon av binære data som kan skrives eller skrives ut uten å miste informasjon, som i filintegritetskontroller, geocaching og sikker passordgenerering.",
    "y6t1n": "Ulemper med Base32",
    "z2x8c": "Base32 har færre visuelle tvetydigheter siden den bare bruker store bokstaver og sifre, noe som gjør det lettere å lese og transkribere for hånd eller over telefon sammenlignet med Base64 som inkluderer '+', '/' og små bokstaver.",
    "z6m1c": "Senere varianter som z-base-32 ble introdusert for å forbedre brukervennligheten, og erstattet noen mindre minneverdige karakterer med andre, men Crockfords originale spesifikasjon er fortsatt mye brukt i dag."
}