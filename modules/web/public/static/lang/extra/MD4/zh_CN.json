{
    "MD4-Advantages-011": "使用MD4有什么优点？",
    "MD4-AlgorithmDetails-010": "MD4算法详细信息",
    "MD4-Applications-018": "哪些应用程序已经使用或仍在使用 MD4？",
    "MD4-Breakdown-016": "该算法的设计缺陷导致了实际的攻击，允许轻松的哈希冲突甚至部分原像攻击，使得 MD4 不适合当今的任何安全加密用例。",
    "MD4-CollisionSecurity-015": "MD4 有几个加密弱点，包括容易受到碰撞攻击。这意味着两个不同的输入可以产生相同的哈希输出，这对于需要抗冲突性或强消息完整性的应用程序来说是不安全的。",
    "MD4-Def-002": "MD4（消息摘要算法 4）是由 Ronald Rivest 于 1990 年设计的加密哈希函数。它为任何给定的输入消息生成 128 位哈希值。",
    "MD4-DigitalSignature-Risks-021": "使用 MD4 进行数字签名的风险",
    "MD4-Disadvantages-014": "MD4 有哪些缺点和安全问题？",
    "MD4-FAQ-001": "MD4是什么？",
    "MD4-HistoricalUse-019": "历史上，MD4 用于数字签名、文件完整性检查和软件更新。然而，由于其漏洞，这些应用程序在很大程度上已转向更安全的替代方案，例如 SHA-256 和 SHA-3。",
    "MD4-History-004": "MD4是如何发展起来的，它的历史意义是什么？",
    "MD4-Implementation-013": "它已在各种平台和语言上得到广泛实施和标准化，可以轻松集成到现有系统中，尽管这一优势被现代环境中的安全问题所抵消。",
    "MD4-InsecurityExamples-017": "MD4 安全故障示例",
    "MD4-LegacySystems-020": "MD4 可能仍然存在于遗留系统中，但在所有关注安全性的环境中不鼓励使用它。现代标准不再推荐 MD4 用于任何加密目的。",
    "MD4-Operation-007": "MD4操作是如何进行的？",
    "MD4-Origin-005": "MD4 是 MD2 和 MD3 的演变，旨在提供更快的性能，同时保持安全属性。然而，很明显 MD4 存在一些安全漏洞。",
    "MD4-Process-008": "MD4 通过将输入消息填充为 512 位的倍数并将其划分为 16 字块来处理输入消息。然后，该算法使用涉及按位运算、模加法和非线性函数的四轮处理对这些块进行操作。",
    "MD4-Purpose-003": "MD4的目的是通过生成固定大小的数字指纹来确保数据的完整性，该数字指纹可用于验证原始数据的真实性和完整性。",
    "MD4-Rounds-009": "处理完所有块后，所得内部状态将转换为最终的 128 位哈希值。",
    "MD4-Speed-012": "MD4 最初被设计为比其前身更快，这使得它在推出时在需要快速散列的应用程序中很受欢迎。",
    "MD4-Successors-006": "尽管存在缺陷，MD4 为后续的哈希函数（如 MD5 和 SHA-1）奠定了基础，MD5 和 SHA-1 改进了其设计，但随着时间的推移也继承了它的一些漏洞。"
}