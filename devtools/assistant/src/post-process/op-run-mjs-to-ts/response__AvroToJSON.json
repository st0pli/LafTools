{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` is added to the `AvroToJSON` class, following the pattern of the provided example.\n2. The description of the code's function and purpose is added to the top comment.\n3. Natural text messages are wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class AvroToJSON that extends the Operation class. It provides functionality to convert Avro encoded data into JSON.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport avro from \"avsc\";\n\n/**\n * Avro to JSON operation\n */\nclass AvroToJSON extends Operation {\n  /**\n   * AvroToJSON constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"avroToJson.name\", \"Avro to JSON\");\n    this.module = \"Serialise\";\n    this.description = Dot(\"avroToJson.desc\", \"Converts Avro encoded data into JSON.\");\n    this.infoURL = \"https://wikipedia.org/wiki/Apache_Avro\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"avroToJson.arg.forceJson.name\", \"Force Valid JSON\"),\n        type: \"boolean\",\n        value: true,\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    if (input.byteLength <= 0) {\n      throw new OperationError(Dot(\"avroToJson.error.noInput\", \"Please provide an input.\"));\n    }\n\n    const forceJSON = args[0];\n\n    return new Promise((resolve, reject) => {\n      const result: any[] = [];\n      const inpArray = new Uint8Array(input);\n      const decoder = new avro.streams.BlockDecoder();\n\n      decoder\n        .on(\"data\", function (obj) {\n          result.push(obj);\n        })\n        .on(\"error\", function () {\n          reject(new OperationError(Dot(\"avroToJson.error.parseError\", \"Error parsing Avro file.\")));\n        })\n        .on(\"end\", function () {\n          if (forceJSON) {\n            resolve(\n              result.length === 1\n                ? JSON.stringify(result[0], null, 4)\n                : JSON.stringify(result, null, 4),\n            );\n          } else {\n            const data = result.reduce(\n              (result, current) => result + JSON.stringify(current) + \"\\n\",\n              \"\",\n            );\n            resolve(data);\n          }\n        });\n\n      decoder.write(inpArray);\n      decoder.end();\n    });\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'avroToJson',\n      optName: Dot(\"avroToJson.optName\", \"Generate JSON from Avro\", \"AvroToJSON\"),\n      optDescription: Dot(\n        \"avroToJson.optDesc\",\n        \"This operation converts Avro encoded data into a JSON {0}.\",\n        \"string\"\n      ),\n      exampleInput: \"<ArrayBuffer example>\", // Fill it if possible\n      exampleOutput: \"<JSON string example>\", // Fill it if possible\n    }\n  }\n}\n\nexport default AvroToJSON;\n```\n\nPlease note the following:\n- Natural text messages are wrapped with the `Dot` function, with keys provided to uniquely identify each string.\n- The `getOptDetail` method is added to the `AvroToJSON` class, with placeholders for `exampleInput` and `exampleOutput`.\n- The description at the top of the file is filled out to describe the code's function and purpose.\n- The import statements are left unchanged as per the requirement.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` is added to the `AvroToJSON` class, following the pattern of the provided example.\n2. The description of the code's function and purpose is added to the top comment.\n3. Natural text messages are wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class AvroToJSON that extends the Operation class. It provides functionality to convert Avro encoded data into JSON.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport avro from \"avsc\";\n\n/**\n * Avro to JSON operation\n */\nclass AvroToJSON extends Operation {\n  /**\n   * AvroToJSON constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"avroToJson.name\", \"Avro to JSON\");\n    this.module = \"Serialise\";\n    this.description = Dot(\"avroToJson.desc\", \"Converts Avro encoded data into JSON.\");\n    this.infoURL = \"https://wikipedia.org/wiki/Apache_Avro\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"avroToJson.arg.forceJson.name\", \"Force Valid JSON\"),\n        type: \"boolean\",\n        value: true,\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    if (input.byteLength <= 0) {\n      throw new OperationError(Dot(\"avroToJson.error.noInput\", \"Please provide an input.\"));\n    }\n\n    const forceJSON = args[0];\n\n    return new Promise((resolve, reject) => {\n      const result: any[] = [];\n      const inpArray = new Uint8Array(input);\n      const decoder = new avro.streams.BlockDecoder();\n\n      decoder\n        .on(\"data\", function (obj) {\n          result.push(obj);\n        })\n        .on(\"error\", function () {\n          reject(new OperationError(Dot(\"avroToJson.error.parseError\", \"Error parsing Avro file.\")));\n        })\n        .on(\"end\", function () {\n          if (forceJSON) {\n            resolve(\n              result.length === 1\n                ? JSON.stringify(result[0], null, 4)\n                : JSON.stringify(result, null, 4),\n            );\n          } else {\n            const data = result.reduce(\n              (result, current) => result + JSON.stringify(current) + \"\\n\",\n              \"\",\n            );\n            resolve(data);\n          }\n        });\n\n      decoder.write(inpArray);\n      decoder.end();\n    });\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'avroToJson',\n      optName: Dot(\"avroToJson.optName\", \"Generate JSON from Avro\", \"AvroToJSON\"),\n      optDescription: Dot(\n        \"avroToJson.optDesc\",\n        \"This operation converts Avro encoded data into a JSON {0}.\",\n        \"string\"\n      ),\n      exampleInput: \"<ArrayBuffer example>\", // Fill it if possible\n      exampleOutput: \"<JSON string example>\", // Fill it if possible\n    }\n  }\n}\n\nexport default AvroToJSON;\n```\n\nPlease note the following:\n- Natural text messages are wrapped with the `Dot` function, with keys provided to uniquely identify each string.\n- The `getOptDetail` method is added to the `AvroToJSON` class, with placeholders for `exampleInput` and `exampleOutput`.\n- The description at the top of the file is filled out to describe the code's function and purpose.\n- The import statements are left unchanged as per the requirement.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713885093,
    "id": "8596361375016623938",
    "model": "glm-4",
    "request_id": "8596361375016623938",
    "usage": {
      "completion_tokens": 954,
      "prompt_tokens": 1057,
      "total_tokens": 2011
    }
  }
}