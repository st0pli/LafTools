{
    "a4s6x": "Como funciona o Base32?",
    "a8b7z": "Assim, o preenchimento só é necessário se o último grupo de bits codificado não for divisível por 40 bits (já que 8 caracteres Base32 representam 40 bits). O preenchimento consistirá de zero a seis caracteres '=' no final da string codificada.",
    "b8g2k": "Cenários de uso para Base32",
    "c0v2p": "Operações comuns com Base32",
    "d1x7v": "Outro exemplo está no Git, onde objetos com hash às vezes são armazenados no formato Base32 para evitar problemas com finais de linha e restrições de nome de arquivo. Além disso, o HashiCorp Vault usa Base32 para derivação de chaves.",
    "d9w7m": "Além disso, por usar apenas letras maiúsculas, ele não pode utilizar todas as combinações possíveis de distinção entre maiúsculas e minúsculas como uma medida de segurança adicional, como o Base64 às vezes faz com a dobragem de maiúsculas e minúsculas durante a decodificação.",
    "e5c7r": "Base32 é um esquema de codificação binário para texto que representa dados em uma string ASCII usando um subconjunto de 32 caracteres. Ele foi projetado para ser legível por humanos e seguro para URL.",
    "f0q4w": "Um cenário de uso popular é a geração de chaves secretas para autenticação de dois fatores (2FA), onde serviços como Google Authenticator e Yubikey usam segredos codificados em Base32.",
    "f5a0s": "Além disso, o Base32 produz uma saída mais longa, mas pode ser mais adequado para aplicações específicas, como nomes de arquivos, devido à falta de caracteres especiais que podem entrar em conflito com as regras do sistema de arquivos.",
    "g8r3e": "A principal desvantagem do Base32 é a sua eficiência de espaço relativamente baixa; ele expande os dados de entrada em aproximadamente 25% mais que o Base64. Isso significa que é necessário mais armazenamento ou largura de banda para a mesma quantidade de dados codificados.",
    "h4e1b": "Também é útil para situações em que strings alfanuméricas que diferenciam maiúsculas de minúsculas são mais fáceis de manusear do que hexadecimais ou base64, que podem conter caracteres não alfanuméricos que podem causar problemas em determinados contextos (como URLs ou nomes de arquivos).",
    "h9j3m": "Preenchimento em Base32",
    "i9o7k": "Vantagens do Base32 sobre o Base64",
    "j1b5k": "As operações mais comuns envolvendo Base32 incluem a codificação de dados binários em uma string Base32 e a decodificação de uma string Base32 de volta ao seu formato binário original.",
    "k7g0n": "Em Base32, cada 5 bits de dados de entrada são mapeados para um dos 32 caracteres do conjunto 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='.",
    "l1p9z": "O que é Base32?",
    "m6d8b": "Cada valor de 5 bits é representado por um único caractere, permitindo codificação e decodificação eficientes para sistemas que preferem trabalhar com octetos (unidades de 8 bits).",
    "n3e7r": "História da Base32",
    "p9s5t": "Base32 foi desenvolvido por Douglas Crockford, conhecido por suas contribuições ao JavaScript, em 2001. Ele foi criado como uma alternativa mais confiável às codificações existentes como Base64, especialmente para situações que exigem representações de dados binários baseadas em texto.",
    "q2w5m": "Objetivo de usar Base32?",
    "r6tq9z": "<b>Exemplo:</b> para codificar 'TEST12345' em Base32, você pode usar bibliotecas como base32-encode em Node.js ou funções integradas em outras linguagens, como base64.b32encode do Python.",
    "s5t0n": "O preenchimento em Base32 envolve a adição de caracteres '=' para garantir que o pedaço final de dados codificados ainda contenha um múltiplo de 8 bits. No entanto, ao contrário do Base64, o preenchimento do Base32 é mínimo porque cada caractere Base32 já codifica 5 bits.",
    "t8z1v": "Quando não há bits suficientes no final para preencher um grupo completo de 5 bits, caracteres de preenchimento '=' são adicionados. Por exemplo, um byte requer dois caracteres Base32 e uma sequência de 3 bytes precisaria de quatro caracteres Base32.",
    "u3j9p": "Base32 é frequentemente usado quando você precisa de uma representação textual compacta de dados binários que possa ser digitada ou impressa sem perder informações, como em verificações de integridade de arquivos, geocaching e geração segura de senhas.",
    "y6t1n": "Desvantagens do Base32",
    "z2x8c": "Base32 tem menos ambiguidades visuais, pois usa apenas letras maiúsculas e dígitos, facilitando a leitura e a transcrição à mão ou por telefone em comparação com Base64, que inclui '+', '/' e letras minúsculas.",
    "z6m1c": "Variações posteriores como z-base-32 foram introduzidas para melhorar a usabilidade, substituindo alguns caracteres menos memoráveis ​​por outros, mas a especificação original de Crockford permanece amplamente utilizada até hoje."
}