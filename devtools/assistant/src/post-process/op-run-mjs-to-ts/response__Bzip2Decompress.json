{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` is added to the `Bzip2Decompress` class, following the pattern of the provided example.\n2. The description at the top of the file is filled out in English.\n3. Natural text is wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This script defines a class Bzip2Decompress that extends the Operation class. It provides functionality to decompress data using the Bzip2 algorithm.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport Bzip2 from \"libbzip2-wasm\";\nimport { isWorkerEnvironment } from \"../Utils.mjs\";\n\n/**\n * Bzip2 Decompress operation\n */\nclass Bzip2Decompress extends Operation {\n  /**\n   * Bzip2Decompress constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"bzip2.name\", \"Bzip2 Decompress\");\n    this.module = \"Compression\";\n    this.description = Dot(\"bzip2.desc\", \"Decompresses data using the Bzip2 algorithm.\");\n    this.infoURL = \"https://wikipedia.org/wiki/Bzip2\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.args = [\n      {\n        name: Dot(\"bzip2.arg1.name\", \"Use low-memory, slower decompression algorithm\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n    this.checks = [\n      {\n        pattern: \"^\\\\x42\\\\x5a\\\\x68\",\n        flags: \"\",\n        args: [],\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {Promise<ArrayBuffer>}\n   */\n  async run(input: ArrayBuffer, args: any[]): Promise<ArrayBuffer> {\n    const [small] = args;\n    if (input.byteLength <= 0) {\n      throw new OperationError(Dot(\"error.noInput\", \"Please provide an input.\"));\n    }\n    if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"status.loadingBzip2\", \"Loading Bzip2...\"));\n    return new Promise((resolve, reject) => {\n      Bzip2().then((bzip2) => {\n        if (isWorkerEnvironment())\n          self.sendStatusMessage(Dot(\"status.decompressing\", \"Decompressing data...\"));\n        const inpArray = new Uint8Array(input);\n        const bzip2cc = bzip2.decompressBZ2(inpArray, small ? 1 : 0);\n        if (bzip2cc.error !== 0) {\n          reject(new OperationError(bzip2cc.error_msg));\n        } else {\n          const output = bzip2cc.output;\n          resolve(\n            output.buffer.slice(\n              output.byteOffset,\n              output.byteLength + output.byteOffset,\n            ),\n          );\n        }\n      });\n    });\n  }\n\n  public getOptDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'bzip2Decompress',\n      optName: Dot(\"bzip2.optName\", \"Bzip2 Decompress\"),\n      optDescription: Dot(\n        \"bzip2.optDesc\",\n        \"This operation decompresses data using the {0} algorithm.\",\n        \"Bzip2\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default Bzip2Decompress;\n```\n\nPlease note the following:\n- The `Dot` function is used to wrap all natural text strings that are displayed to the user.\n- The `getOptDetail` method is added to the `Bzip2Decompress` class, with placeholders for `exampleInput` and `exampleOutput`.\n- The top-level comment now contains an English description of the script's function and purpose.\n- The import statements are left unchanged as per the instructions.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` is added to the `Bzip2Decompress` class, following the pattern of the provided example.\n2. The description at the top of the file is filled out in English.\n3. Natural text is wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This script defines a class Bzip2Decompress that extends the Operation class. It provides functionality to decompress data using the Bzip2 algorithm.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport Bzip2 from \"libbzip2-wasm\";\nimport { isWorkerEnvironment } from \"../Utils.mjs\";\n\n/**\n * Bzip2 Decompress operation\n */\nclass Bzip2Decompress extends Operation {\n  /**\n   * Bzip2Decompress constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"bzip2.name\", \"Bzip2 Decompress\");\n    this.module = \"Compression\";\n    this.description = Dot(\"bzip2.desc\", \"Decompresses data using the Bzip2 algorithm.\");\n    this.infoURL = \"https://wikipedia.org/wiki/Bzip2\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.args = [\n      {\n        name: Dot(\"bzip2.arg1.name\", \"Use low-memory, slower decompression algorithm\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n    this.checks = [\n      {\n        pattern: \"^\\\\x42\\\\x5a\\\\x68\",\n        flags: \"\",\n        args: [],\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {Promise<ArrayBuffer>}\n   */\n  async run(input: ArrayBuffer, args: any[]): Promise<ArrayBuffer> {\n    const [small] = args;\n    if (input.byteLength <= 0) {\n      throw new OperationError(Dot(\"error.noInput\", \"Please provide an input.\"));\n    }\n    if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"status.loadingBzip2\", \"Loading Bzip2...\"));\n    return new Promise((resolve, reject) => {\n      Bzip2().then((bzip2) => {\n        if (isWorkerEnvironment())\n          self.sendStatusMessage(Dot(\"status.decompressing\", \"Decompressing data...\"));\n        const inpArray = new Uint8Array(input);\n        const bzip2cc = bzip2.decompressBZ2(inpArray, small ? 1 : 0);\n        if (bzip2cc.error !== 0) {\n          reject(new OperationError(bzip2cc.error_msg));\n        } else {\n          const output = bzip2cc.output;\n          resolve(\n            output.buffer.slice(\n              output.byteOffset,\n              output.byteLength + output.byteOffset,\n            ),\n          );\n        }\n      });\n    });\n  }\n\n  public getOptDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'bzip2Decompress',\n      optName: Dot(\"bzip2.optName\", \"Bzip2 Decompress\"),\n      optDescription: Dot(\n        \"bzip2.optDesc\",\n        \"This operation decompresses data using the {0} algorithm.\",\n        \"Bzip2\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default Bzip2Decompress;\n```\n\nPlease note the following:\n- The `Dot` function is used to wrap all natural text strings that are displayed to the user.\n- The `getOptDetail` method is added to the `Bzip2Decompress` class, with placeholders for `exampleInput` and `exampleOutput`.\n- The top-level comment now contains an English description of the script's function and purpose.\n- The import statements are left unchanged as per the instructions.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713885802,
    "id": "8596355671299873437",
    "model": "glm-4",
    "request_id": "8596355671299873437",
    "usage": {
      "completion_tokens": 1000,
      "prompt_tokens": 1097,
      "total_tokens": 2097
    }
  }
}