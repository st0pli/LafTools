{
    "R_S7_CLAo": "Beispiel: Um „TEST12345“ in Base32 zu kodieren, können Sie Bibliotheken wie base32-encode in Node.js oder integrierte Funktionen in anderen Sprachen wie Pythons base64.b32encode verwenden.",
    "a4s6x": "Wie funktioniert Base32?",
    "a8b7z": "Daher ist ein Auffüllen nur erforderlich, wenn die letzte zu kodierende Bitgruppe nicht durch 40 Bit teilbar ist (da 8 Base32-Zeichen 40 Bit darstellen). Das Auffüllen besteht aus null bis sechs „=“-Zeichen am Ende der codierten Zeichenfolge.",
    "b8g2k": "Nutzungsszenarien für Base32",
    "c0v2p": "Allgemeine Operationen mit Base32",
    "d1x7v": "Ein weiteres Beispiel ist Git, wo Hash-Objekte manchmal im Base32-Format gespeichert werden, um Probleme mit Zeilenenden und Dateinamenbeschränkungen zu vermeiden. Außerdem verwendet HashiCorp Vault Base32 zur Schlüsselableitung.",
    "d9w7m": "Da es außerdem nur Großbuchstaben verwendet, kann es nicht alle möglichen Kombinationen der Groß-/Kleinschreibung als zusätzliche Sicherheitsmaßnahme nutzen, wie dies bei Base64 manchmal bei der Groß-/Kleinschreibung beim Dekodieren der Fall ist.",
    "e5c7r": "Base32 ist ein Binär-zu-Text-Codierungsschema, das Daten in einer ASCII-Zeichenfolge mithilfe einer Teilmenge von 32 Zeichen darstellt. Es ist so konzipiert, dass es für Menschen lesbar und URL-sicher ist.",
    "f0q4w": "Ein beliebtes Einsatzszenario ist die Generierung geheimer Schlüssel für die Zwei-Faktor-Authentifizierung (2FA), bei der Dienste wie Google Authenticator und Yubikey Base32-codierte Geheimnisse verwenden.",
    "f5a0s": "Darüber hinaus erzeugt Base32 eine längere Ausgabe, kann jedoch für bestimmte Anwendungen wie Dateinamen besser geeignet sein, da es keine Sonderzeichen enthält, die möglicherweise mit Dateisystemregeln in Konflikt geraten.",
    "g8r3e": "Der Hauptnachteil von Base32 ist seine relativ geringe Platzeffizienz; Es erweitert die Eingabedaten um etwa 25 % mehr als Base64. Dies bedeutet, dass für die gleiche Menge an codierten Daten mehr Speicherplatz oder Bandbreite benötigt wird.",
    "h4e1b": "Dies ist auch in Situationen nützlich, in denen Groß-/Kleinschreibung beachtete alphanumerische Zeichenfolgen einfacher zu handhaben sind als hexadezimale oder Base64-Zeichenfolgen, die möglicherweise nicht alphanumerische Zeichen enthalten, die in bestimmten Kontexten (z. B. URLs oder Dateinamen) Probleme verursachen können.",
    "h9j3m": "Polsterung in Base32",
    "i9o7k": "Vorteile von Base32 gegenüber Base64",
    "j1b5k": "Zu den häufigsten Vorgängen im Zusammenhang mit Base32 gehören das Codieren von Binärdaten in einen Base32-String und das Decodieren eines Base32-Strings zurück in sein ursprüngliches Binärformat.",
    "k7g0n": "In Base32 werden alle 5 Bits der Eingabedaten einem der 32 Zeichen aus der Menge „ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=“ zugeordnet.",
    "l1p9z": "Was ist Base32?",
    "m6d8b": "Jeder 5-Bit-Wert wird durch ein einzelnes Zeichen dargestellt, was eine effiziente Kodierung und Dekodierung für Systeme ermöglicht, die lieber mit Oktetten (8-Bit-Einheiten) arbeiten.",
    "n3e7r": "Geschichte von Base32",
    "p9s5t": "Base32 wurde 2001 von Douglas Crockford entwickelt, der für seine Beiträge zu JavaScript bekannt ist. Es wurde als zuverlässigere Alternative zu bestehenden Kodierungen wie Base64 entwickelt, insbesondere für Situationen, in denen textbasierte Darstellungen von Binärdaten erforderlich sind.",
    "q2w5m": "Zweck der Verwendung von Base32?",
    "s5t0n": "Beim Auffüllen in Base32 werden „=“-Zeichen hinzugefügt, um sicherzustellen, dass der letzte Teil der codierten Daten immer noch ein Vielfaches von 8 Bits enthält. Im Gegensatz zu Base64 ist die Base32-Auffüllung jedoch minimal, da jedes Base32-Zeichen bereits 5 Bits codiert.",
    "t8z1v": "Wenn am Ende nicht genügend Bits übrig sind, um eine vollständige 5-Bit-Gruppe zu füllen, werden Füllzeichen „=“ hinzugefügt. Beispielsweise erfordert ein Byte zwei Base32-Zeichen und eine 3-Byte-Sequenz würde vier Base32-Zeichen erfordern.",
    "u3j9p": "Base32 wird häufig verwendet, wenn Sie eine kompakte Textdarstellung von Binärdaten benötigen, die ohne Informationsverlust eingegeben oder gedruckt werden kann, z. B. bei Dateiintegritätsprüfungen, Geocaching und der sicheren Passwortgenerierung.",
    "y6t1n": "Nachteile von Base32",
    "z2x8c": "Base32 weist weniger visuelle Mehrdeutigkeiten auf, da es nur Großbuchstaben und Ziffern verwendet, was das Lesen und Transkribieren per Hand oder am Telefon im Vergleich zu Base64, das „+“, „/“ und Kleinbuchstaben enthält, erleichtert.",
    "z6m1c": "Spätere Varianten wie z-base-32 wurden eingeführt, um die Benutzerfreundlichkeit zu verbessern und einige weniger einprägsame Zeichen durch andere zu ersetzen, aber die ursprüngliche Spezifikation von Crockford wird auch heute noch häufig verwendet."
}