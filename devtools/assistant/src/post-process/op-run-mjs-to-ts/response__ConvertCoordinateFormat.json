{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` is added to the `ConvertCoordinateFormat` class, following the pattern of the provided example.\n2. The description at the top of the file is filled out in English.\n3. Natural text is wrapped with the `Dot` function as required.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This script defines a class to convert geographical coordinates between different formats.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { FORMATS, convertCoordinates } from \"../lib/ConvertCoordinates.mjs\";\n\n/**\n * Convert co-ordinate format operation\n */\nclass ConvertCoordinateFormat extends Operation {\n  /**\n   * ConvertCoordinateFormat constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"convertCoord.name\", \"Convert co-ordinate format\");\n    this.module = \"Hashing\";\n    this.description = Dot(\n      \"convertCoord.desc\",\n      \"Converts geographical coordinates between different formats.<br><br>Supported formats:<ul><li>Degrees Minutes Seconds (DMS)</li><li>Degrees Decimal Minutes (DDM)</li><li>Decimal Degrees (DD)</li><li>Geohash</li><li>Military Grid Reference System (MGRS)</li><li>Ordnance Survey National Grid (OSNG)</li><li>Universal Transverse Mercator (UTM)</li></ul><br>The operation can try to detect the input co-ordinate format and delimiter automatically, but this may not always work correctly.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Geographic_coordinate_conversion\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"inputFormat.arg\", \"Input Format\"),\n        type: \"option\",\n        value: [\"Auto\"].concat(FORMATS),\n      },\n      {\n        name: Dot(\"inputDelimiter.arg\", \"Input Delimiter\"),\n        type: \"option\",\n        value: [\n          \"Auto\",\n          \"Direction Preceding\",\n          \"Direction Following\",\n          \"\\\\n\",\n          \"Comma\",\n          \"Semi-colon\",\n          \"Colon\",\n        ],\n      },\n      {\n        name: Dot(\"outputFormat.arg\", \"Output Format\"),\n        type: \"option\",\n        value: FORMATS,\n      },\n      {\n        name: Dot(\"outputDelimiter.arg\", \"Output Delimiter\"),\n        type: \"option\",\n        value: [\"Space\", \"\\\\n\", \"Comma\", \"Semi-colon\", \"Colon\"],\n      },\n      {\n        name: Dot(\"compassDirections.arg\", \"Include Compass Directions\"),\n        type: \"option\",\n        value: [\"None\", \"Before\", \"After\"],\n      },\n      {\n        name: Dot(\"precision.arg\", \"Precision\"),\n        type: \"number\",\n        value: 3,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    if (input.replace(/[\\s+]/g, \"\") !== \"\") {\n      const [inFormat, inDelim, outFormat, outDelim, incDirection, precision] =\n        args;\n      const result = convertCoordinates(\n        input,\n        inFormat,\n        inDelim,\n        outFormat,\n        outDelim,\n        incDirection,\n        precision,\n      );\n      return result;\n    } else {\n      return input;\n    }\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'convertCoordinates',\n      optName: Dot(\"convertCoord.optName\", \"Convert {0} Format\", \"Coordinate\"),\n      optDescription: Dot(\n        \"convertCoord.optDesc\",\n        \"This operation converts geographical coordinates to the {0} format.\",\n        \"selected format\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    };\n  }\n}\n\nexport default ConvertCoordinateFormat;\n```\n\nPlease note the following:\n- The `Dot` function is used to wrap all natural text that is displayed to the user.\n- The",
  "response": {
    "choices": [
      {
        "finish_reason": "length",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` is added to the `ConvertCoordinateFormat` class, following the pattern of the provided example.\n2. The description at the top of the file is filled out in English.\n3. Natural text is wrapped with the `Dot` function as required.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This script defines a class to convert geographical coordinates between different formats.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { FORMATS, convertCoordinates } from \"../lib/ConvertCoordinates.mjs\";\n\n/**\n * Convert co-ordinate format operation\n */\nclass ConvertCoordinateFormat extends Operation {\n  /**\n   * ConvertCoordinateFormat constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"convertCoord.name\", \"Convert co-ordinate format\");\n    this.module = \"Hashing\";\n    this.description = Dot(\n      \"convertCoord.desc\",\n      \"Converts geographical coordinates between different formats.<br><br>Supported formats:<ul><li>Degrees Minutes Seconds (DMS)</li><li>Degrees Decimal Minutes (DDM)</li><li>Decimal Degrees (DD)</li><li>Geohash</li><li>Military Grid Reference System (MGRS)</li><li>Ordnance Survey National Grid (OSNG)</li><li>Universal Transverse Mercator (UTM)</li></ul><br>The operation can try to detect the input co-ordinate format and delimiter automatically, but this may not always work correctly.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Geographic_coordinate_conversion\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"inputFormat.arg\", \"Input Format\"),\n        type: \"option\",\n        value: [\"Auto\"].concat(FORMATS),\n      },\n      {\n        name: Dot(\"inputDelimiter.arg\", \"Input Delimiter\"),\n        type: \"option\",\n        value: [\n          \"Auto\",\n          \"Direction Preceding\",\n          \"Direction Following\",\n          \"\\\\n\",\n          \"Comma\",\n          \"Semi-colon\",\n          \"Colon\",\n        ],\n      },\n      {\n        name: Dot(\"outputFormat.arg\", \"Output Format\"),\n        type: \"option\",\n        value: FORMATS,\n      },\n      {\n        name: Dot(\"outputDelimiter.arg\", \"Output Delimiter\"),\n        type: \"option\",\n        value: [\"Space\", \"\\\\n\", \"Comma\", \"Semi-colon\", \"Colon\"],\n      },\n      {\n        name: Dot(\"compassDirections.arg\", \"Include Compass Directions\"),\n        type: \"option\",\n        value: [\"None\", \"Before\", \"After\"],\n      },\n      {\n        name: Dot(\"precision.arg\", \"Precision\"),\n        type: \"number\",\n        value: 3,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    if (input.replace(/[\\s+]/g, \"\") !== \"\") {\n      const [inFormat, inDelim, outFormat, outDelim, incDirection, precision] =\n        args;\n      const result = convertCoordinates(\n        input,\n        inFormat,\n        inDelim,\n        outFormat,\n        outDelim,\n        incDirection,\n        precision,\n      );\n      return result;\n    } else {\n      return input;\n    }\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'convertCoordinates',\n      optName: Dot(\"convertCoord.optName\", \"Convert {0} Format\", \"Coordinate\"),\n      optDescription: Dot(\n        \"convertCoord.optDesc\",\n        \"This operation converts geographical coordinates to the {0} format.\",\n        \"selected format\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    };\n  }\n}\n\nexport default ConvertCoordinateFormat;\n```\n\nPlease note the following:\n- The `Dot` function is used to wrap all natural text that is displayed to the user.\n- The",
          "role": "assistant"
        }
      }
    ],
    "created": 1713886572,
    "id": "8596361237577615046",
    "model": "glm-4",
    "request_id": "8596361237577615046",
    "usage": {
      "completion_tokens": 1024,
      "prompt_tokens": 1223,
      "total_tokens": 2247
    }
  }
}