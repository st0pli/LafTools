{
  "result": "Below is the TypeScript conversion of the provided code, with the additional method based on the example given, natural text wrapped in the `Dot` function, and the import statements left unchanged as per the instructions.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This class ExtractEmailAddresses is designed to extract all email addresses from a given input string using regular expressions. It provides options to display the total number of found emails, sort them, and ensure uniqueness.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { search } from \"../lib/Extract.mjs\";\nimport { caseInsensitiveSort } from \"../lib/Sort.mjs\";\n\n/**\n * Extract email addresses operation\n */\nclass ExtractEmailAddresses extends Operation {\n  /**\n   * ExtractEmailAddresses constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"extractEmail.name\", \"Extract email addresses\");\n    this.module = \"Regex\";\n    this.description = Dot(\"extractEmail.desc\", \"Extracts all email addresses from the input.\");\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"extractEmail.arg.displayTotal\", \"Display total\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"extractEmail.arg.sort\", \"Sort\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"extractEmail.arg.unique\", \"Unique\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const [displayTotal, sort, unique] = args,\n      // email regex from: https://www.regextester.com/98066\n      regex =\n        /(?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9](?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9-]*[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9])?\\.)+[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9](?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9-]*[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}\\])/gi;\n\n    const results = search(\n      input,\n      regex,\n      null,\n      sort ? caseInsensitiveSort : null,\n      unique,\n    );\n\n    if (displayTotal) {\n      return Dot(\"extractEmail.result.total\", `Total found: {0}\\n\\n{1}`, [results.length, results.join(\"\\n\")]);\n    } else {\n      return results.join(\"\\n\");\n    }\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Regex\",\n        \"description\": Dot(\"extractEmail.optDetail.desc\", \"Extracts all email addresses from the input text.\"),\n        \"inputType\": \"string\",\n        \"outputType\": \"string\",\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: '',\n      nousenouseID: 'extractEmail',\n      optName: Dot(\"extractEmail.optName\", \"Extract Email Addresses\"),\n      optDescription: Dot(\n        \"extractEmail.optDescription\",\n        \"This operation extracts email addresses from the given input.\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default ExtractEmailAddresses;\n",
  "response": {
    "choices": [
      {
        "finish_reason": "length",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided code, with the additional method based on the example given, natural text wrapped in the `Dot` function, and the import statements left unchanged as per the instructions.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This class ExtractEmailAddresses is designed to extract all email addresses from a given input string using regular expressions. It provides options to display the total number of found emails, sort them, and ensure uniqueness.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { search } from \"../lib/Extract.mjs\";\nimport { caseInsensitiveSort } from \"../lib/Sort.mjs\";\n\n/**\n * Extract email addresses operation\n */\nclass ExtractEmailAddresses extends Operation {\n  /**\n   * ExtractEmailAddresses constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"extractEmail.name\", \"Extract email addresses\");\n    this.module = \"Regex\";\n    this.description = Dot(\"extractEmail.desc\", \"Extracts all email addresses from the input.\");\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"extractEmail.arg.displayTotal\", \"Display total\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"extractEmail.arg.sort\", \"Sort\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"extractEmail.arg.unique\", \"Unique\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const [displayTotal, sort, unique] = args,\n      // email regex from: https://www.regextester.com/98066\n      regex =\n        /(?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9](?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9-]*[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9])?\\.)+[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9](?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9-]*[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}\\])/gi;\n\n    const results = search(\n      input,\n      regex,\n      null,\n      sort ? caseInsensitiveSort : null,\n      unique,\n    );\n\n    if (displayTotal) {\n      return Dot(\"extractEmail.result.total\", `Total found: {0}\\n\\n{1}`, [results.length, results.join(\"\\n\")]);\n    } else {\n      return results.join(\"\\n\");\n    }\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Regex\",\n        \"description\": Dot(\"extractEmail.optDetail.desc\", \"Extracts all email addresses from the input text.\"),\n        \"inputType\": \"string\",\n        \"outputType\": \"string\",\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: '',\n      nousenouseID: 'extractEmail',\n      optName: Dot(\"extractEmail.optName\", \"Extract Email Addresses\"),\n      optDescription: Dot(\n        \"extractEmail.optDescription\",\n        \"This operation extracts email addresses from the given input.\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default ExtractEmailAddresses;\n",
          "role": "assistant"
        }
      }
    ],
    "created": 1713888153,
    "id": "8596361478095820530",
    "model": "glm-4",
    "request_id": "8596361478095820530",
    "usage": {
      "completion_tokens": 1024,
      "prompt_tokens": 1284,
      "total_tokens": 2308
    }
  }
}