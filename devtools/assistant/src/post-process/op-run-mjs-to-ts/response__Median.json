{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements applied:\n\n1. A new method `getOptDetail` is added to the `Median` class, following the pattern of the provided example.\n2. The description of the code's function is added at the top.\n3. Natural text is wrapped with the `Dot` function.\n4. Import statements remain unchanged.\n5. No code has been omitted or altered without necessity.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The Median class computes the median of a list of numbers from a given string input, excluding any non-numeric items.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport BigNumber from \"bignumber.js\";\nimport Operation from \"../Operation.tsx\";\nimport { median, createNumArray } from \"../lib/Arithmetic.mjs\";\nimport { ARITHMETIC_DELIM_OPTIONS } from \"../lib/Delim.mjs\";\n\n/**\n * Median operation\n */\nclass Median extends Operation {\n  /**\n   * Median constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"median.name\", \"Median\");\n    this.module = \"Default\";\n    this.description = Dot(\"median.desc\", \"Computes the median of a number list. If an item in the string is not a number it is excluded from the list.\");\n    this.infoURL = \"https://wikipedia.org/wiki/Median\";\n    this.inputType = \"string\";\n    this.outputType = \"BigNumber\";\n    this.args = [\n      {\n        name: Dot(\"median.arg.delimiter\", \"Delimiter\"),\n        type: \"option\",\n        value: ARITHMETIC_DELIM_OPTIONS,\n      },\n    ];\n  }\n\n  /**\n   * Get detailed information about the operation\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'median',\n      optName: Dot(\"median.optName\", \"Calculate {0}\", this.name),\n      optDescription: Dot(\n        \"median.optDesc\",\n        \"This operation calculates the {0} of a list of numbers from the input string, excluding non-numeric items.\",\n        this.name\n      ),\n      exampleInput: \"0x0a 8 1 .5\", // Example input\n      exampleOutput: \"<4.5>\", // Placeholder for output, actual value depends on input\n    }\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {BigNumber}\n   */\n  run(input, args): BigNumber {\n    const val = median(createNumArray(input, args[0]));\n    return BigNumber.isBigNumber(val) ? val : new BigNumber(NaN);\n  }\n}\n\nexport default Median;\n\n// Helper function to wrap natural text\nfunction Dot(key: string, value: string, ...params: string[]): string {\n  // This is a placeholder for the actual Dot function implementation.\n  // It is assumed that the Dot function would handle the key-value pair and parameters accordingly.\n  return value.replace(/\\{(\\d+)\\}/g, (_, index) => params[index] || '');\n}\n```\n\nPlease note that the `Dot` function is a placeholder here, and its actual implementation should be provided according to your environment or requirements. The `exampleOutput` is wrapped in angle brackets `< >` to indicate that the value is a placeholder and should be replaced with the actual output based on the example input.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements applied:\n\n1. A new method `getOptDetail` is added to the `Median` class, following the pattern of the provided example.\n2. The description of the code's function is added at the top.\n3. Natural text is wrapped with the `Dot` function.\n4. Import statements remain unchanged.\n5. No code has been omitted or altered without necessity.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The Median class computes the median of a list of numbers from a given string input, excluding any non-numeric items.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport BigNumber from \"bignumber.js\";\nimport Operation from \"../Operation.tsx\";\nimport { median, createNumArray } from \"../lib/Arithmetic.mjs\";\nimport { ARITHMETIC_DELIM_OPTIONS } from \"../lib/Delim.mjs\";\n\n/**\n * Median operation\n */\nclass Median extends Operation {\n  /**\n   * Median constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"median.name\", \"Median\");\n    this.module = \"Default\";\n    this.description = Dot(\"median.desc\", \"Computes the median of a number list. If an item in the string is not a number it is excluded from the list.\");\n    this.infoURL = \"https://wikipedia.org/wiki/Median\";\n    this.inputType = \"string\";\n    this.outputType = \"BigNumber\";\n    this.args = [\n      {\n        name: Dot(\"median.arg.delimiter\", \"Delimiter\"),\n        type: \"option\",\n        value: ARITHMETIC_DELIM_OPTIONS,\n      },\n    ];\n  }\n\n  /**\n   * Get detailed information about the operation\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'median',\n      optName: Dot(\"median.optName\", \"Calculate {0}\", this.name),\n      optDescription: Dot(\n        \"median.optDesc\",\n        \"This operation calculates the {0} of a list of numbers from the input string, excluding non-numeric items.\",\n        this.name\n      ),\n      exampleInput: \"0x0a 8 1 .5\", // Example input\n      exampleOutput: \"<4.5>\", // Placeholder for output, actual value depends on input\n    }\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {BigNumber}\n   */\n  run(input, args): BigNumber {\n    const val = median(createNumArray(input, args[0]));\n    return BigNumber.isBigNumber(val) ? val : new BigNumber(NaN);\n  }\n}\n\nexport default Median;\n\n// Helper function to wrap natural text\nfunction Dot(key: string, value: string, ...params: string[]): string {\n  // This is a placeholder for the actual Dot function implementation.\n  // It is assumed that the Dot function would handle the key-value pair and parameters accordingly.\n  return value.replace(/\\{(\\d+)\\}/g, (_, index) => params[index] || '');\n}\n```\n\nPlease note that the `Dot` function is a placeholder here, and its actual implementation should be provided according to your environment or requirements. The `exampleOutput` is wrapped in angle brackets `< >` to indicate that the value is a placeholder and should be replaced with the actual output based on the example input.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713891496,
    "id": "8596361478095793371",
    "model": "glm-4",
    "request_id": "8596361478095793371",
    "usage": {
      "completion_tokens": 831,
      "prompt_tokens": 972,
      "total_tokens": 1803
    }
  }
}