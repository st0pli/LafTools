{
    "c1p4b": "次に、各 10 進数が 5 つの Base85 文字の一意のシーケンスに変換されます。最後に 4 バイト未満が残っている場合は、パディングが適用される可能性があります。",
    "d7w2e": "Base85 は、入力データを 4 バイトのグループに分割し、各グループを 0 から 2^32-1 までの 10 進数に変換することによって機能します。",
    "f9t1z": "Base85 は当初、圧縮率を高めるために PostScript ドキュメント内のバイナリ データを効率的に表現するために開発されました。",
    "g3h5s": "Base85はどのように機能するのでしょうか?",
    "j5s7r": "JavaScript で Base85 を使用してエンコード/デコードするにはどうすればよいですか?",
    "k2em5e": "これにより、同じ量の入力データに対する出力文字列が短くなり、サイズの最小化が重要なシナリオでは有益となる可能性があります。",
    "p8eq9n": "JavaScript での Base85 エンコードおよびデコードには、「base85」や「ascii85」などのライブラリを使用できます。",
    "q2n3r": "現在、PDF ドキュメントや特定のネットワーク プロトコルなど、スペース効率と読みやすさが重要となるさまざまなアプリケーションで使用されています。",
    "r9qn8v": "Base85 の主な利点は、より大きな文字セット (Base64 の 64 または Base32 の 32 に対して 85) によるスペース効率の向上です。",
    "u1i2b": "Base64 や Base32 よりも Base85 を使用する利点は何ですか?",
    "v4k6r": "Base64 や Base32 と比較して、より大きな文字セットを使用して、データをよりコンパクトな形式にエンコードします。",
    "w1x4k": "はい、Ascii85 (PostScript および PDF で使用)、Z85 (ZeroMQ)、UUencode (古い形式) など、いくつかの亜種が存在します。それぞれにわずかに異なる文字セットとルールがあります。",
    "x9n1b": "Base85 は、85 個の印刷可能な ASCII 文字のセットを使用してバイナリ データを表すエンコード スキームです。",
    "y6m8k": "Base85はなぜ作成されたのでしょうか?",
    "z2t7m": "Base85とは何ですか?",
    "z5m6t": "使用例: `const Base85 = require('base85'); const encoded =base85.encode('your-data'); const decoded =base85.decode(encoded);`",
    "z9t7p": "Base85 の特定の亜種はありますか?"
}