
import { expect, test } from 'vitest'
import { render, screen } from '@testing-library/react'
import { DataTypes, Model } from 'sequelize'
import ToBase64 from './impl/conversion/ToBase64'
import { OpDetail } from './s_tools'
import appToolInfoObj, { AppInfoType } from './d_meta'
import { ToolHandler } from './r_handler'
import fs from 'fs'
import FromBase64 from './impl/conversion/FromBase64'
import _ from 'lodash'
import path from 'path'

// test 1+1 = 2
test('generate-app-op-detail-list', async () => {
    // list all tsx files in the folder __dirname/impl/conversion/, and filter files name starting with _
    let conversionFiles: { [key: string]: string } = {}
    // no, do not use meta but use fs
    fs.readdirSync(__dirname + '/impl/conversion/').forEach(file => {
        if (file.startsWith('_')) return
        conversionFiles[file] = fs.readFileSync(__dirname + '/impl/conversion/' + file, { encoding: 'utf-8' })
    })
    let fullStr: string[] = []

    _.forEach(conversionFiles, (x, d, n) => {
        let currentArr: string[] = []
        let collectedOptMode = false;
        let optDescArr: string[] = []
        let hasDOTForDesc = false
        let st_countBracketForOptDesc = 0;
        let ed_countBracketForOptDesc = 0;
        x.split('\n').filter(xx => {
            if (xx.indexOf("optName") != -1) {
                currentArr.push(xx)
                return;
            }
            if (xx.indexOf("optDescription") != -1) {
                hasDOTForDesc = xx.indexOf("Dot") != -1
                if (!hasDOTForDesc) {
                    return;
                }
                collectedOptMode = true;
                // if(!hasDOTForDesc){
                //     currentArr.push(xx)
                //     return;
                // }
            }
            let dotMode = false;
            if (collectedOptMode) {
                // if (xx.indexOf("(") != -1) {
                //     st_countBracketForOptDesc++
                // }
                // if (xx.indexOf(")") != -1) {
                //     ed_countBracketForOptDesc++;
                // }
                optDescArr.push(xx)
                if (
                    (!hasDOTForDesc &&
                        xx.endsWith(",")) ||
                    // ed_countBracketForOptDesc > st_countBracketForOptDesc
                    xx.indexOf("),") != -1
                    ||
                    xx.endsWith(")")
                ) {
                    collectedOptMode = false
                    currentArr.push(optDescArr.filter(x => !_.isEmpty(x)).join("\n"))
                }
            }
        })
        let crtArrStr = `${d.replace('.tsx', '')}:({Dot})=>{
            return {
                // DO NOT CHANGE THIS PART AS THIS WHOLE FILE IS GENERATED BY SYSTEM
            ${currentArr.join('\n')}
            }
        }`
        fullStr.push(crtArrStr)
    })
    let fileTxt = ` // DO NOT TOUCH THIS FILE, AUTO GENERATED BY SYSTEM
//    Copyright
    import {AppOpFnMapType} from './d_meta';
    
   export  let AppOptFnMap:AppOpFnMapType ={
${fullStr.join(',\n')}
    }
export type AppOpFnMapTypeKeys = keyof typeof AppOptFnMap;
    
    ` + ''
    console.log(fileTxt)
    let finalFile = path.join(__dirname, 'g_optlist.tsx')
    fs.writeFileSync(finalFile, fileTxt)
    expect(1 + 1).toBe(2)
})
