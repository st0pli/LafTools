{
    "CP-Advantage-Career-014": "學習程式設計可以為各個行業提供職業機會，讓您能夠開發創新的解決方案、自動化任務並理解複雜的系統。",
    "CP-Advantages-013": "學習電腦程式設計有什麼好處？",
    "CP-Basics-001": "什麼是計算機程式設計？",
    "CP-Def-002": "電腦程式設計涉及用程式語言編寫指令或程式碼來指導電腦如何執行特定任務。",
    "CP-History-004": "電腦程式設計的歷史是怎麼樣的？",
    "CP-History-Origin-005": "第一台可程式機器可以追溯到 19 世紀 Ada Lovelace 對 Charles Babbage 分析機的研究。然而，隨著 20 世紀 40 年代第一台通用電子計算機 ENIAC 的發明，現代程式設計開始起飛。",
    "CP-Lang-Choice-009": "語言的選擇取決於專案需求、社群支援、學習難易度和表現需求等因素。",
    "CP-Language-Evolution-006": "從那時起，程式語言從機器碼發展到組合語言，然後發展到 FORTRAN、COBOL、C 等高階語言，現在發展到 Python、JavaScript 和 Rust 等現代語言。",
    "CP-Languages-007": "有哪些流行的程式語言？",
    "CP-Languages-List-008": "流行的程式語言包括 Java、Python、JavaScript、C++、C#、Swift、Go、PHP、Ruby 和 Kotlin。每個都有自己的優勢和用例，例如用於資料科學的 Python、用於 Web 開發的 JavaScript 和用於系統程式設計的 C++。",
    "CP-Process-010": "電腦程式設計的過程是怎樣的？",
    "CP-Process-Explanation-011": "程式設計通常涉及規劃（定義問題和設計解決方案）、編碼（用所選語言編寫原始程式碼）、測試（調試和驗證功能）和維護（隨著時間的推移更新和改進程式）。",
    "CP-Purpose-003": "程式設計師創建演算法、解決問題並建立可以自動化流程、操作資料以及與使用者或其他系統互動的軟體應用程式。",
    "CP-SDLC-012": "這通常是在軟體開發生命週期 (SDLC) 中建構的，其中包括需求分析、設計、部署和使用者驗收測試等附加階段。",
    "CP-Skillset-015": "它還可以提高邏輯思維、解決問題的能力以及對新技術的適應能力，使人在數位時代更加多才多藝。",
    "HistOfProg-Wikipedia": "程式語言的歷史 - 維基百科",
    "SDLC-Wikipedia": "軟體開發生命週期 - 維基百科",
    "TIOBE-Index": "TIOBE 指數 - 軟體品質公司"
}