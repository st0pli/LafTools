{
    "c1p4b": "Varje decimaltal omvandlas sedan till en unik sekvens av fem Base85-tecken. Om det finns färre än fyra byte kvar i slutet kan utfyllnad tillämpas.",
    "d7w2e": "Base85 fungerar genom att dela in indata i grupper om fyra byte och konvertera varje grupp till ett decimaltal mellan 0 och 2^32-1.",
    "f9t1z": "Base85 utvecklades ursprungligen för att effektivt representera binära data i PostScript-dokument för bättre komprimeringsförhållanden.",
    "g3h5s": "Hur fungerar Base85?",
    "j5s7r": "Hur kodar/avkodar jag med Base85 i JavaScript?",
    "k2em5e": "Detta resulterar i kortare utdatasträngar för samma mängd indata, vilket kan vara fördelaktigt i scenarier där det är viktigt att minimera storleken.",
    "p8eq9n": "Du kan använda bibliotek som 'base85' eller 'ascii85' för Base85-kodning och avkodning i JavaScript.",
    "q2n3r": "Idag används den i olika applikationer där utrymmeseffektivitet och läsbarhet är avgörande, såsom PDF-dokument och vissa nätverksprotokoll.",
    "r9qn8v": "Den största fördelen med Base85 är dess förbättrade utrymmeseffektivitet tack vare en större teckenuppsättning (85 mot 64 i Base64 eller 32 i Base32).",
    "u1i2b": "Vilka är fördelarna med att använda Base85 framför Base64 eller Base32?",
    "v4k6r": "Den kodar data till en mer kompakt form jämfört med Base64 eller Base32 genom att använda en större teckenuppsättning.",
    "w1x4k": "Ja, det finns flera varianter, inklusive Ascii85 (används i PostScript och PDF), Z85 (ZeroMQ) och UUencode (ett äldre format). Var och en har en lite olika teckenuppsättning och regler.",
    "x9n1b": "Base85 är ett kodningsschema som representerar binära data med en uppsättning av 85 utskrivbara ASCII-tecken.",
    "y6m8k": "Varför skapades Base85?",
    "z2t7m": "Vad är Base85?",
    "z5m6t": "Exempel på användning: `const base85 = require('base85'); const encoded = base85.encode('din-data'); const decoded = base85.decode(encoded);`",
    "z9t7p": "Finns det några specifika varianter av Base85?"
}