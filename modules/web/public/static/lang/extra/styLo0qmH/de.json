{
    "CSS-Advantages-010": "Welche Vorteile bietet die Verwendung von CSS?",
    "CSS-Advantages-Customization-012": "Ein weiterer Vorteil ist die Möglichkeit, das Erscheinungsbild mehrerer Seiten gleichzeitig anzupassen, wodurch Zeit und Aufwand bei der Aktualisierung von Site-weiten Stilen gespart werden.",
    "CSS-Advantages-Separation-011": "Ein Vorteil ist die Trennung von Inhalt und Präsentation, was die Wartbarkeit und Skalierbarkeit von Websites verbessert.",
    "CSS-Animations-Transitions-019": "CSS-Animationen und -Übergänge ermöglichen reibungslose visuelle Effekte, ohne dass JavaScript erforderlich ist.",
    "CSS-Def-002": "CSS (Cascading Style Sheets) ist eine Stylesheet-Sprache, die zur Beschreibung der Darstellung eines in HTML oder XML geschriebenen Dokuments verwendet wird.",
    "CSS-Disadvantages-013": "Welche Nachteile hat CSS?",
    "CSS-Disadvantages-Browser-Compat-015": "Ein weiteres Problem ist die browserübergreifende Kompatibilität, da verschiedene Browser CSS-Regeln möglicherweise unterschiedlich interpretieren. Dies erfordert, dass Entwickler Herstellerpräfixe oder Feature-Erkennungstechniken verwenden, um eine konsistente Darstellung über alle Browser hinweg zu gewährleisten.",
    "CSS-Disadvantages-Cascade-014": "Eine Herausforderung besteht darin, die kaskadierende Natur von Stilen zu verwalten, die manchmal zu unerwarteten Vererbungs- und Spezifitätsproblemen führen kann.",
    "CSS-Evolution-006": "Seitdem hat es sich durch CSS2 (1998), CSS2.1 (2007) und CSS3 (laufende Entwicklung) weiterentwickelt und Funktionen wie Selektoren, Animationen, responsives Design und mehr eingeführt.",
    "CSS-Future-020": "Wie sieht die Zukunft der CSS-Technologie aus?",
    "CSS-Future-Houdini-022": "Houdini beispielsweise zielt darauf ab, Low-Level-APIs zur Anpassung des Rendering-Prozesses des Browsers bereitzustellen und Entwicklern eine beispiellose Kontrolle über Stil und Layout zu ermöglichen.",
    "CSS-Future-Progress-021": "Die CSS-Arbeitsgruppe arbeitet weiterhin an neuen Modulen wie CSS-Variablen (benutzerdefinierte Eigenschaften), Houdini und Containerabfragen.",
    "CSS-Hist-Origin-005": "CSS wurde erstmals im Oktober 1994 von Håkon Wium Lie vorgeschlagen und wurde im Dezember 1996 mit CSS1 zu einer offiziellen W3C-Empfehlung.",
    "CSS-History-004": "Was ist die Geschichte von CSS?",
    "CSS-History-W3C": "Zeitleiste der CSS-Empfehlungen des W3C",
    "CSS-Key-Features-016": "Was sind einige der wichtigsten Funktionen von CSS?",
    "CSS-Layouts-018": "Flexbox- und Grid-Layoutsysteme bieten leistungsstarke Tools zum Erstellen reaktionsfähiger und flexibler Seitenlayouts.",
    "CSS-MDN-Animations": "MDN-Leitfaden für CSS-Animationen",
    "CSS-MDN-Flexbox": "MDN-Leitfaden für Flexbox",
    "CSS-MDN-Grid": "MDN-Leitfaden zum CSS-Grid",
    "CSS-MDN-Houdini": "MDN-Einführung in Houdini",
    "CSS-Purpose-003": "Es ermöglicht Entwicklern, Inhalte von Präsentationen zu trennen und Stile wie Layout, Farben und Schriftarten zu definieren, wodurch Webseiten auf verschiedenen Geräten und Bildschirmen optisch ansprechend und konsistent werden.",
    "CSS-Selectors-017": "Selektoren ermöglichen die gezielte Ausrichtung auf bestimmte HTML-Elemente basierend auf Typ, Klasse, ID, Attributen und mehr.",
    "CSS-Tech-History-001": "Was ist CSS?",
    "CSS-Usage-007": "Wie verwende ich CSS in meinen Webprojekten?",
    "CSS-Usage-Basics-008": "Um CSS zu verwenden, erstellen Sie eine separate Datei (z. B. style.css), die Ihre Stile enthält, und verknüpfen Sie sie dann mit Ihrer HTML-Datei, indem Sie das <link>-Element im Abschnitt <head> verwenden.",
    "CSS-Usage-Inline-009": "Alternativ können Sie Inline-Stile mithilfe des Attributs „style“ direkt in HTML-Elemente einbinden oder CSS in das Tag <style> im Abschnitt <head> einbetten.",
    "CSS-Vendor-Prefixes": "MDN-Leitfaden zu Anbieterpräfixen",
    "CSS-W3C-Selectors": "W3C-Selektoren Level 4 Spec",
    "CSS-WG-Future-Modules": "W3C CSS Aktuelle Arbeit"
}