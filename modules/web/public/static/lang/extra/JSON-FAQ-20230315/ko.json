{
    "JSON-Advantages-011": "JSON은 일반적으로 XML보다 더 작고 분석 속도가 빠르므로 대역폭과 속도가 중요한 클라이언트-서버 통신에 이상적입니다.",
    "JSON-Basics-001": "JSON이란 무엇입니까?",
    "JSON-Beautify-007": "JSON 미화란 무엇입니까?",
    "JSON-Beautify-Def-008": "JSON 미화는 JSON 데이터를 적절한 들여쓰기 및 줄 바꿈을 사용하여 사람이 더 쉽게 읽을 수 있는 형식으로 지정하여 분석 및 디버깅을 더 쉽게 만드는 프로세스를 말합니다.",
    "JSON-Beautify-Example-009": "이전: '{\\\"키\\\":\\\"값\\\",\\\"배열\\\":[1,2,3]}', 이후: '{\\n \\\"키\\\": \\\"값\\\", \\n \\\"배열\\\": [\\n 1,\\n 2,\\n 3\\n ]\\n}'",
    "JSON-Def-002": "JSON(JavaScript Object Notation)은 사람이 쉽게 읽고 쓸 수 있고 기계가 쉽게 구문 분석하고 생성할 수 있는 경량의 텍스트 기반 데이터 교환 형식입니다.",
    "JSON-JavaScript-Support-020": "JSON은 전역 개체 `JSON.parse()` 및 `JSON.stringify()`를 통해 JavaScript에서 기본적으로 지원됩니다. 유효한 JSON은 유효한 JavaScript 리터럴 객체 또는 배열이기도 하며, 이를 통해 두 형식 간의 원활한 변환이 가능합니다.",
    "JSON-JavaScript-Usage-021": "웹 개발에서 JSON은 일반적으로 AJAX 요청, 서버 측 렌더링 및 데이터 저장소(예: 로컬 저장소 또는 IndexedDB)에 사용됩니다.",
    "JSON-Linting-022": "JSON 린팅이란 무엇이며 왜 중요한가요?",
    "JSON-Linting-Benefit-024": "린터는 잘못된 JSON으로 인한 런타임 오류를 방지하여 원활한 데이터 교환을 보장하고 잠재적인 문제를 디버깅하는 시간을 절약할 수 있습니다.",
    "JSON-Linting-Explanation-023": "JSON Linting은 JSON 문서가 JSON 사양을 준수하는지 확인하는 프로세스입니다. 이는 데이터 구문 분석을 시도하기 전에 구문 오류를 식별하는 데 도움이 됩니다.",
    "JSON-Path-013": "JSON 경로란 무엇입니까?",
    "JSON-Path-Example-015": "$.store.book[0].title은 books 배열이 포함된 상점이 있는 JSON 객체의 첫 번째 책 제목을 선택합니다.",
    "JSON-Path-Explanation-014": "JSON Path는 XML용 XPath와 유사한 쿼리 언어로, 경로와 같은 표기법을 사용하여 JSON 문서에서 데이터를 추출할 수 있습니다.",
    "JSON-Path-Guide": "JSONPath - JSON용 XPath",
    "JSON-Purpose-003": "이는 XML 대신 서버와 웹 애플리케이션 간에 데이터를 전송하는 데 주로 사용되며 `JSON.parse()` 및 `JSON.stringify()` 메소드를 통해 JavaScript에서 기본 지원됩니다.",
    "JSON-Scope-in-JavaScript-019": "JSON은 JavaScript에 어떻게 적합합니까?",
    "JSON-Security-025": "JSON으로 작업할 때 보안 문제는 무엇입니까?",
    "JSON-Security-Impact-026": "잠재적인 보안 위험에는 구문 분석/실행 시 의도하지 않은 동작을 유발할 수 있는 악성 데이터가 전송되는 JSON 주입 공격이 포함됩니다.",
    "JSON-Security-Prevention-027": "이러한 위험을 완화하려면 항상 사용자 입력을 삭제하고 콘텐츠를 실행하지 않고 JSON을 안전하게 구문 분석하는 라이브러리(예: JavaScript에 내장된 JSON.parse())를 사용하세요. 또한 JSON을 구문 분석하는 데 eval()을 사용하지 마세요.",
    "JSON-Serialization-016": "JSON 직렬화 및 역직렬화란 무엇입니까?",
    "JSON-Serialization-Def-017": "JSON 직렬화는 JavaScript 개체를 JSON 문자열로 변환하는 프로세스인 반면, 역직렬화는 그 반대입니다. 즉, JSON 문자열을 다시 JavaScript 개체로 변환합니다.",
    "JSON-Serialization-W3Schools": "W3Schools의 JSON 직렬화",
    "JSON-Syntax-004": "JSON의 기본 구문은 무엇입니까?",
    "JSON-Syntax-Example-f005": "JSON 객체는 중괄호 {0}로 묶인 키-값 쌍으로 구성됩니다. 각 키는 큰따옴표로 묶인 문자열, 그 뒤에 콜론, 그 값이 와야 합니다.",
    "JSON-Syntax-Reference": "JSON 기반 MDN 웹 문서",
    "JSON-Value-Types-006": "값은 문자열, 숫자, 부울, 배열(대괄호로 묶음)일 수 있습니다.",
    "JSON-vs-XML-010": "JSON은 XML과 어떻게 비교됩니까?",
    "JSON-vs-XML-Article": "JSON과 XML 비교",
    "MDN-JSON-in-JavaScript": "MDN 웹 문서 - JSON 작업",
    "OWASP-JSON-Injection": "OWASP - JSON 주입",
    "XML-Advantages-012": "XML은 더 많은 구조 유연성을 제공하고 네임스페이스를 지원하므로 복잡한 문서 구조와 시스템 간 상호 운용성에 도움이 될 수 있습니다."
}