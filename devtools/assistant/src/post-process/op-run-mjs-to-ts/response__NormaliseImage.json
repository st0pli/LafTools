{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` has been added to the `NormaliseImage` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function as required.\n4. The import statements have been left unchanged.\n5. No code has been omitted or altered in a way that would leave implementations unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The NormaliseImage class is used to normalize the colors of an image. It provides methods to process ArrayBuffer input and output the result as an ArrayBuffer or HTML for display in web applications.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { isImage } from \"../lib/FileType.mjs\";\nimport { toBase64 } from \"../lib/Base64.mjs\";\n// import jimp from \"jimp\";\nvar jimp = require(\"jimp\");\n\n/**\n * Normalise Image operation\n */\nclass NormaliseImage extends Operation {\n  /**\n   * NormaliseImage constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"normaliseImage.name\", \"Normalise Image\");\n    this.module = \"Image\";\n    this.description = Dot(\"normaliseImage.desc\", \"Normalise the image colours.\");\n    this.infoURL = \"\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.presentType = \"html\";\n    this.args = [];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {ArrayBuffer}\n   */\n  async run(input: ArrayBuffer, args: object[]): Promise<ArrayBuffer> {\n    if (!isImage(input)) {\n      throw new OperationError(Dot(\"error.invalidFileType\", \"Invalid file type.\"));\n    }\n\n    let image;\n    try {\n      image = await jimp.read(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"error.openImage\", `Error opening image file. (${err})`));\n    }\n\n    try {\n      image.normalize();\n\n      let imageBuffer;\n      if (image.getMIME() === \"image/gif\") {\n        imageBuffer = await image.getBufferAsync(jimp.MIME_PNG);\n      } else {\n        imageBuffer = await image.getBufferAsync(jimp.AUTO);\n      }\n      return imageBuffer.buffer;\n    } catch (err) {\n      throw new OperationError(Dot(\"error.normalizeImage\", `Error normalising image. (${err})`));\n    }\n  }\n\n  /**\n   * Displays the normalised image using HTML for web apps\n   * @param {ArrayBuffer} data\n   * @returns {string}\n   */\n  present(data: ArrayBuffer): string {\n    if (!data.byteLength) return \"\";\n    const dataArray = new Uint8Array(data);\n\n    const type = isImage(dataArray);\n    if (!type) {\n      throw new OperationError(Dot(\"error.invalidFileType\", \"Invalid file type.\"));\n    }\n\n    return `<img src=\"data:${type};base64,${toBase64(dataArray)}\">`;\n  }\n\n  /**\n   * Get operation details\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Image\",\n        \"description\": Dot(\"normaliseImage.config.desc\", \"Normalize the image colors.\"),\n        \"inputType\": \"ArrayBuffer\",\n        \"outputType\": \"ArrayBuffer\",\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": []\n      },\n      infoURL: '',\n      nousenouseID: 'normaliseImage',\n      optName: Dot(\"normaliseImage.optName\", \"Normalize Image\"),\n      optDescription: Dot(\n        \"normaliseImage.optDesc\",\n        \"This operation normalizes image colors into an {0} format.\",\n        \"ArrayBuffer\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"<ArrayBuffer>\", // Assuming the output is an ArrayBuffer\n    }\n  }\n}\n\nexport default NormaliseImage;\n```\n\nPlease note that the `exampleOutput` is wrapped with `< >` as per the instructions, indicating that the actual output will be of type `ArrayBuffer`. The `exampleInput` is left empty, as it was not specified in the original code. If an example input were to be provided, it should be done in a way that is consistent with the expected input type of `ArrayBuffer`.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements met:\n\n1. A new method `getOptDetail` has been added to the `NormaliseImage` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function as required.\n4. The import statements have been left unchanged.\n5. No code has been omitted or altered in a way that would leave implementations unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The NormaliseImage class is used to normalize the colors of an image. It provides methods to process ArrayBuffer input and output the result as an ArrayBuffer or HTML for display in web applications.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { isImage } from \"../lib/FileType.mjs\";\nimport { toBase64 } from \"../lib/Base64.mjs\";\n// import jimp from \"jimp\";\nvar jimp = require(\"jimp\");\n\n/**\n * Normalise Image operation\n */\nclass NormaliseImage extends Operation {\n  /**\n   * NormaliseImage constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"normaliseImage.name\", \"Normalise Image\");\n    this.module = \"Image\";\n    this.description = Dot(\"normaliseImage.desc\", \"Normalise the image colours.\");\n    this.infoURL = \"\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.presentType = \"html\";\n    this.args = [];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {ArrayBuffer}\n   */\n  async run(input: ArrayBuffer, args: object[]): Promise<ArrayBuffer> {\n    if (!isImage(input)) {\n      throw new OperationError(Dot(\"error.invalidFileType\", \"Invalid file type.\"));\n    }\n\n    let image;\n    try {\n      image = await jimp.read(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"error.openImage\", `Error opening image file. (${err})`));\n    }\n\n    try {\n      image.normalize();\n\n      let imageBuffer;\n      if (image.getMIME() === \"image/gif\") {\n        imageBuffer = await image.getBufferAsync(jimp.MIME_PNG);\n      } else {\n        imageBuffer = await image.getBufferAsync(jimp.AUTO);\n      }\n      return imageBuffer.buffer;\n    } catch (err) {\n      throw new OperationError(Dot(\"error.normalizeImage\", `Error normalising image. (${err})`));\n    }\n  }\n\n  /**\n   * Displays the normalised image using HTML for web apps\n   * @param {ArrayBuffer} data\n   * @returns {string}\n   */\n  present(data: ArrayBuffer): string {\n    if (!data.byteLength) return \"\";\n    const dataArray = new Uint8Array(data);\n\n    const type = isImage(dataArray);\n    if (!type) {\n      throw new OperationError(Dot(\"error.invalidFileType\", \"Invalid file type.\"));\n    }\n\n    return `<img src=\"data:${type};base64,${toBase64(dataArray)}\">`;\n  }\n\n  /**\n   * Get operation details\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Image\",\n        \"description\": Dot(\"normaliseImage.config.desc\", \"Normalize the image colors.\"),\n        \"inputType\": \"ArrayBuffer\",\n        \"outputType\": \"ArrayBuffer\",\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": []\n      },\n      infoURL: '',\n      nousenouseID: 'normaliseImage',\n      optName: Dot(\"normaliseImage.optName\", \"Normalize Image\"),\n      optDescription: Dot(\n        \"normaliseImage.optDesc\",\n        \"This operation normalizes image colors into an {0} format.\",\n        \"ArrayBuffer\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"<ArrayBuffer>\", // Assuming the output is an ArrayBuffer\n    }\n  }\n}\n\nexport default NormaliseImage;\n```\n\nPlease note that the `exampleOutput` is wrapped with `< >` as per the instructions, indicating that the actual output will be of type `ArrayBuffer`. The `exampleInput` is left empty, as it was not specified in the original code. If an example input were to be provided, it should be done in a way that is consistent with the expected input type of `ArrayBuffer`.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713891675,
    "id": "8596355980537524368",
    "model": "glm-4",
    "request_id": "8596355980537524368",
    "usage": {
      "completion_tokens": 1018,
      "prompt_tokens": 1126,
      "total_tokens": 2144
    }
  }
}