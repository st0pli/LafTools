{
    "R_S7_CLAo": "Przykład: aby zakodować „TEST12345” w Base32, możesz użyć bibliotek takich jak base32-encode w Node.js lub wbudowanych funkcji w innych językach, takich jak base64.b32encode Pythona.",
    "a4s6x": "Jak działa Base32?",
    "a8b7z": "Zatem dopełnianie jest konieczne tylko wtedy, gdy ostatnia grupa kodowanych bitów nie jest podzielna przez 40 bitów (ponieważ 8 znaków Base32 reprezentuje 40 bitów). Dopełnienie będzie składać się z od zera do sześciu znaków „=” na końcu zakodowanego ciągu.",
    "b8g2k": "Scenariusze użycia Base32",
    "c0v2p": "Typowe operacje w Base32",
    "d1x7v": "Innym przykładem jest Git, gdzie zaszyfrowane obiekty są czasami przechowywane w formacie Base32, aby uniknąć problemów z zakończeniami linii i ograniczeniami nazw plików. Ponadto HashiCorp Vault używa Base32 do wyprowadzania kluczy.",
    "d9w7m": "Co więcej, ponieważ używa tylko wielkich liter, nie może wykorzystać wszystkich możliwych kombinacji uwzględniania wielkości liter jako dodatkowego środka bezpieczeństwa, tak jak czasami robi to Base64 w przypadku składania wielkości liter podczas dekodowania.",
    "e5c7r": "Base32 to schemat kodowania binarnego na tekst, który reprezentuje dane w ciągu ASCII przy użyciu podzbioru 32 znaków. Został zaprojektowany tak, aby był czytelny dla człowieka i bezpieczny dla adresów URL.",
    "f0q4w": "Jednym z popularnych scenariuszy użycia jest generowanie tajnych kluczy do uwierzytelniania dwuskładnikowego (2FA), gdzie usługi takie jak Google Authenticator i Yubikey korzystają z kluczy tajnych zakodowanych w formacie Base32.",
    "f5a0s": "Dodatkowo Base32 generuje dłuższe dane wyjściowe, ale może być bardziej odpowiedni dla określonych zastosowań, takich jak nazwy plików, ze względu na brak znaków specjalnych, które mogłyby kolidować z regułami systemu plików.",
    "g8r3e": "Główną wadą Base32 jest stosunkowo słaba wydajność przestrzenna; rozszerza dane wejściowe o około 25% więcej niż Base64. Oznacza to, że ta sama ilość zakodowanych danych zajmuje więcej miejsca lub przepustowości.",
    "h4e1b": "Jest to również przydatne w sytuacjach, gdy ciągi alfanumeryczne uwzględniające wielkość liter są łatwiejsze w obsłudze niż ciągi szesnastkowe lub base64, które mogą zawierać znaki inne niż alfanumeryczne i mogą powodować problemy w określonych kontekstach (takich jak adresy URL lub nazwy plików).",
    "h9j3m": "Wypełnienie w Base32",
    "i9o7k": "Zalety Base32 w porównaniu z Base64",
    "j1b5k": "Najczęstsze operacje wykorzystujące Base32 obejmują kodowanie danych binarnych do ciągu Base32 i dekodowanie ciągu Base32 z powrotem do jego oryginalnego formatu binarnego.",
    "k7g0n": "W Base32 każde 5 bitów danych wejściowych jest mapowanych na jeden z 32 znaków ze zbioru „ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=”.",
    "l1p9z": "Co to jest Base32?",
    "m6d8b": "Każda wartość 5-bitowa jest reprezentowana przez pojedynczy znak, co umożliwia wydajne kodowanie i dekodowanie w systemach preferujących pracę z oktetami (jednostki 8-bitowe).",
    "n3e7r": "Historia Base32",
    "p9s5t": "Base32 został opracowany przez Douglasa Crockforda, znanego ze swojego wkładu w JavaScript, w 2001 roku. Został stworzony jako bardziej niezawodna alternatywa dla istniejących kodowań, takich jak Base64, szczególnie w sytuacjach wymagających tekstowej reprezentacji danych binarnych.",
    "q2w5m": "Cel używania Base32?",
    "s5t0n": "Dopełnienie w Base32 polega na dodaniu znaków „=”, aby mieć pewność, że końcowy fragment zakodowanych danych nadal będzie zawierał wielokrotność 8 bitów. Jednak w przeciwieństwie do Base64, dopełnienie Base32 jest minimalne, ponieważ każdy znak Base32 koduje już 5 bitów.",
    "t8z1v": "Jeśli na końcu nie ma wystarczającej liczby bitów, aby wypełnić pełną 5-bitową grupę, dodawane są znaki dopełniające „=”. Na przykład bajt wymaga dwóch znaków Base32, a sekwencja 3-bajtowa wymagałaby czterech znaków Base32.",
    "u3j9p": "Base32 jest często używany, gdy potrzebujesz zwartej tekstowej reprezentacji danych binarnych, którą można wpisać lub wydrukować bez utraty informacji, na przykład przy sprawdzaniu integralności plików, geocachingu i generowaniu bezpiecznego hasła.",
    "y6t1n": "Wady Base32",
    "z2x8c": "Base32 ma mniej niejasności wizualnych, ponieważ używa tylko wielkich liter i cyfr, co ułatwia czytanie i transkrypcję ręcznie lub przez telefon w porównaniu do Base64, który zawiera „+”, „/” i małe litery.",
    "z6m1c": "Późniejsze odmiany, takie jak z-base-32, zostały wprowadzone w celu poprawy użyteczności, zastępując niektóre mniej zapadające w pamięć postacie innymi, ale oryginalna specyfikacja Crockforda jest nadal szeroko stosowana."
}