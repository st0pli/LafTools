{
    "JSON-Advantages-011": "JSON er generelt mindre og raskere å analysere enn XML, noe som gjør den ideell for klient-server-kommunikasjon der båndbredde og hastighet er avgjørende.",
    "JSON-Basics-001": "Hva er JSON?",
    "JSON-Beautify-007": "Hva er JSON Beautification?",
    "JSON-Beautify-Def-008": "JSON-forskjønnelse refererer til prosessen med å formatere JSON-data til en mer lesbar form med riktig innrykk og linjeskift, noe som gjør det lettere å analysere og feilsøke.",
    "JSON-Beautify-Example-009": "Før: '{\\\"nøkkel\\\":\\\"verdi\\\",\\\"array\\\":[1,2,3]}', Etter: '{\\n \\\"nøkkel\\\": \\\"verdi\\\", \\n \\\"matrise\\\": [\\n 1,\\n 2,\\n 3\\n ]\\n}'",
    "JSON-Def-002": "JSON (JavaScript Object Notation) er et lett, tekstbasert datautvekslingsformat som er enkelt for mennesker å lese og skrive, og enkelt for maskiner å analysere og generere.",
    "JSON-JavaScript-Support-020": "JSON støttes naturlig av JavaScript gjennom globale objekter `JSON.parse()` og `JSON.stringify()`. Enhver gyldig JSON er også et gyldig JavaScript-literal objekt eller array, som tillater sømløs konvertering mellom de to formatene.",
    "JSON-JavaScript-Usage-021": "I webutvikling brukes JSON ofte til AJAX-forespørsler, gjengivelse på serversiden og datalagring (f.eks. lokal lagring eller IndexedDB).",
    "JSON-Linting-022": "Hva er JSON-linting og hvorfor er det viktig?",
    "JSON-Linting-Benefit-024": "Linters kan forhindre kjøretidsfeil på grunn av ugyldig JSON, noe som sikrer jevn datautveksling og sparer tid på å feilsøke potensielle problemer.",
    "JSON-Linting-Explanation-023": "JSON-linting er prosessen med å sjekke om et JSON-dokument overholder JSON-spesifikasjonen. Det hjelper med å identifisere syntaksfeil før du prøver å analysere dataene.",
    "JSON-Path-013": "Hva er JSON Path?",
    "JSON-Path-Example-015": "$.store.book[0].title velger tittelen på den første boken i et JSON-objekt med et lager som inneholder bøker.",
    "JSON-Path-Explanation-014": "JSON Path er et spørringsspråk som ligner på XPath for XML, som lar deg trekke ut data fra JSON-dokumenter ved å bruke en banelignende notasjon.",
    "JSON-Path-Guide": "JSONPath - XPath for JSON",
    "JSON-Purpose-003": "Den brukes først og fremst til å overføre data mellom en server og nettapplikasjon som et alternativ til XML, med innebygd støtte i JavaScript via metodene `JSON.parse()` og `JSON.stringify()`.",
    "JSON-Scope-in-JavaScript-019": "Hvordan passer JSON inn i JavaScript?",
    "JSON-Security-025": "Hva er noen sikkerhetsproblemer når du arbeider med JSON?",
    "JSON-Security-Impact-026": "Potensielle sikkerhetsrisikoer inkluderer JSON-injeksjonsangrep, der ondsinnede data sendes som kan forårsake utilsiktet oppførsel når de analyseres/utføres.",
    "JSON-Security-Prevention-027": "For å redusere disse risikoene må du alltid rense brukerinndata og bruke biblioteker som trygt analyserer JSON uten å kjøre innholdet (som JavaScripts innebygde JSON.parse()). Unngå også å bruke eval() for å analysere JSON.",
    "JSON-Serialization-016": "Hva er JSON-serialisering og deserialisering?",
    "JSON-Serialization-Def-017": "JSON-serialisering er prosessen med å konvertere et JavaScript-objekt til en JSON-streng, mens deserialisering er omvendt - å gjøre en JSON-streng tilbake til et JavaScript-objekt.",
    "JSON-Serialization-W3Schools": "JSON-serialisering på W3Schools",
    "JSON-Syntax-004": "Hva er den grunnleggende syntaksen til JSON?",
    "JSON-Syntax-Reference": "MDN Web Docs på JSON",
    "JSON-Value-Types-006": "Verdier kan være strenger, tall, booleaner, matriser (omsluttet av hakeparenteser",
    "JSON-vs-XML-010": "Hvordan er JSON sammenlignet med XML?",
    "JSON-vs-XML-Article": "Sammenligner JSON og XML",
    "MDN-JSON-in-JavaScript": "MDN Web Docs – Arbeide med JSON",
    "OWASP-JSON-Injection": "OWASP - JSON-injeksjon",
    "XML-Advantages-012": "XML gir mer strukturfleksibilitet og støtter navnerom, noe som kan være fordelaktig for komplekse dokumentstrukturer og interoperabilitet på tvers av systemer."
}