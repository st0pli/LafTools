{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, including the requested changes:\n\n1. I've added a new method `getOptDetail` to the `DecodeText` class, based on the structure of the provided example.\n2. I've added an English description of the code's function and purpose at the top.\n3. Natural text strings have been wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The DecodeText class is used to decode text from a chosen character encoding. It extends the Operation class and provides a method to run the decoding process with an ArrayBuffer input and selected encoding argument.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport cptable from \"codepage\";\nimport { CHR_ENC_CODE_PAGES } from \"../lib/ChrEnc.mjs\";\n\n/**\n * Decode text operation\n */\nclass DecodeText extends Operation {\n  /**\n   * DecodeText constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"decodeText.name\", \"Decode text\");\n    this.module = \"Encodings\";\n    this.description = [\n      Dot(\"decodeText.desc.part1\", \"Decodes text from the chosen character encoding.\"),\n      \"<br><br>\",\n      Dot(\"decodeText.desc.part2\", \"Supported charsets are:\"),\n      \"<ul>\",\n      ...Object.keys(CHR_ENC_CODE_PAGES).map((e) => `<li>${Dot(\"decodeText.desc.charset.\" + e, e)}</li>`),\n      \"</ul>\",\n    ].join(\"\\n\");\n    this.infoURL = \"https://wikipedia.org/wiki/Character_encoding\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"decodeText.arg.name.Encoding\", \"Encoding\"),\n        type: \"option\",\n        value: Object.keys(CHR_ENC_CODE_PAGES),\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const format = CHR_ENC_CODE_PAGES[args[0]];\n    return cptable.utils.decode(format, new Uint8Array(input));\n  }\n\n  /**\n   * Get operation detail\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        module: \"Encodings\",\n        description: Dot(\"decodeText.optDetail.config.description\", \"Decodes text from the chosen character encoding.\"),\n        infoURL: this.infoURL,\n        inputType: this.inputType,\n        outputType: this.outputType,\n        flowControl: false,\n        manualBake: false,\n        args: this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'decodeText',\n      optName: Dot(\"decodeText.optName\", \"Decode {0}\", \"Text\"),\n      optDescription: Dot(\n        \"decodeText.optDescription\",\n        \"This operation decodes data from an ArrayBuffer into a {0} string.\",\n        \"text\"\n      ),\n      exampleInput: \"<ArrayBuffer>\", // Placeholder as the actual input cannot be determined without context\n      exampleOutput: \"<string>\", // Placeholder as the actual output cannot be determined without context\n    };\n  }\n}\n\nexport default DecodeText;\n```\n\nPlease note that the `exampleInput` and `exampleOutput` fields in the `getOptDetail` method are placeholders, as actual inputs and outputs would depend on the specific use case. The `Dot` function has been used to wrap natural text strings as per the provided example, with keys generated to uniquely identify each string. The keys are arbitrary and should be replaced with meaningful identifiers as per your project's requirements.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, including the requested changes:\n\n1. I've added a new method `getOptDetail` to the `DecodeText` class, based on the structure of the provided example.\n2. I've added an English description of the code's function and purpose at the top.\n3. Natural text strings have been wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The DecodeText class is used to decode text from a chosen character encoding. It extends the Operation class and provides a method to run the decoding process with an ArrayBuffer input and selected encoding argument.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport cptable from \"codepage\";\nimport { CHR_ENC_CODE_PAGES } from \"../lib/ChrEnc.mjs\";\n\n/**\n * Decode text operation\n */\nclass DecodeText extends Operation {\n  /**\n   * DecodeText constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"decodeText.name\", \"Decode text\");\n    this.module = \"Encodings\";\n    this.description = [\n      Dot(\"decodeText.desc.part1\", \"Decodes text from the chosen character encoding.\"),\n      \"<br><br>\",\n      Dot(\"decodeText.desc.part2\", \"Supported charsets are:\"),\n      \"<ul>\",\n      ...Object.keys(CHR_ENC_CODE_PAGES).map((e) => `<li>${Dot(\"decodeText.desc.charset.\" + e, e)}</li>`),\n      \"</ul>\",\n    ].join(\"\\n\");\n    this.infoURL = \"https://wikipedia.org/wiki/Character_encoding\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"decodeText.arg.name.Encoding\", \"Encoding\"),\n        type: \"option\",\n        value: Object.keys(CHR_ENC_CODE_PAGES),\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const format = CHR_ENC_CODE_PAGES[args[0]];\n    return cptable.utils.decode(format, new Uint8Array(input));\n  }\n\n  /**\n   * Get operation detail\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        module: \"Encodings\",\n        description: Dot(\"decodeText.optDetail.config.description\", \"Decodes text from the chosen character encoding.\"),\n        infoURL: this.infoURL,\n        inputType: this.inputType,\n        outputType: this.outputType,\n        flowControl: false,\n        manualBake: false,\n        args: this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'decodeText',\n      optName: Dot(\"decodeText.optName\", \"Decode {0}\", \"Text\"),\n      optDescription: Dot(\n        \"decodeText.optDescription\",\n        \"This operation decodes data from an ArrayBuffer into a {0} string.\",\n        \"text\"\n      ),\n      exampleInput: \"<ArrayBuffer>\", // Placeholder as the actual input cannot be determined without context\n      exampleOutput: \"<string>\", // Placeholder as the actual output cannot be determined without context\n    };\n  }\n}\n\nexport default DecodeText;\n```\n\nPlease note that the `exampleInput` and `exampleOutput` fields in the `getOptDetail` method are placeholders, as actual inputs and outputs would depend on the specific use case. The `Dot` function has been used to wrap natural text strings as per the provided example, with keys generated to uniquely identify each string. The keys are arbitrary and should be replaced with meaningful identifiers as per your project's requirements.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713887151,
    "id": "8596355946177798363",
    "model": "glm-4",
    "request_id": "8596355946177798363",
    "usage": {
      "completion_tokens": 826,
      "prompt_tokens": 924,
      "total_tokens": 1750
    }
  }
}