{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements implemented.\n\n1. A new method `getOptDetail` has been added to the `BlowfishDecrypt` class, following the pattern of the example.\n2. The description at the top of the file has been updated to reflect the purpose of the code.\n3. Natural text has been wrapped with the `Dot` function as required.\n4. Import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The BlowfishDecrypt class is a TypeScript implementation of the Blowfish decryption algorithm. It provides methods to decrypt data using the Blowfish cipher with various modes and input/output options.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport Utils from \"../Utils.mjs\";\nimport forge from \"node-forge\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { Blowfish } from \"../lib/Blowfish.mjs\";\n\n/**\n * BlowfishDecrypt operation\n */\nclass BlowfishDecrypt extends Operation {\n  /**\n   * BlowfishDecrypt constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"blowfishDecrypt.name\", \"Blowfish Decrypt\");\n    this.module = \"Ciphers\";\n    this.description = Dot(\"blowfishDecrypt.desc\", \"Blowfish is a symmetric-key block cipher designed in 1993 by Bruce Schneier and included in a large number of cipher suites and encryption products. AES now receives more attention.<br><br><b>IV:</b> The Initialization Vector should be 8 bytes long. If not entered, it will default to 8 null bytes.\");\n    this.infoURL = \"https://wikipedia.org/wiki/Blowfish_(cipher)\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"blowfishDecrypt.arg.key\", \"Key\"),\n        type: \"toggleString\",\n        value: \"\",\n        toggleValues: [\"Hex\", \"UTF8\", \"Latin1\", \"Base64\"],\n      },\n      {\n        name: Dot(\"blowfishDecrypt.arg.iv\", \"IV\"),\n        type: \"toggleString\",\n        value: \"\",\n        toggleValues: [\"Hex\", \"UTF8\", \"Latin1\", \"Base64\"],\n      },\n      {\n        name: Dot(\"blowfishDecrypt.arg.mode\", \"Mode\"),\n        type: \"option\",\n        value: [\"CBC\", \"CFB\", \"OFB\", \"CTR\", \"ECB\"],\n      },\n      {\n        name: Dot(\"blowfishDecrypt.arg.input\", \"Input\"),\n        type: \"option\",\n        value: [\"Hex\", \"Raw\"],\n      },\n      {\n        name: Dot(\"blowfishDecrypt.arg.output\", \"Output\"),\n        type: \"option\",\n        value: [\"Raw\", \"Hex\"],\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const key = Utils.convertToByteString(args[0].string, args[0].option),\n      iv = Utils.convertToByteString(args[1].string, args[1].option),\n      mode = args[2],\n      inputType = args[3],\n      outputType = args[4];\n\n    if (key.length !== 8) {\n      throw new OperationError(Dot(\"blowfishDecrypt.error.invalidKey\", `Invalid key length: ${key.length} bytes\n\nBlowfish uses a key length of 8 bytes (64 bits).`));\n    }\n\n    input = Utils.convertToByteString(input, inputType);\n\n    const decipher = Blowfish.createDecipher(key, mode);\n    decipher.start({ iv: iv });\n    decipher.update(forge.util.createBuffer(input));\n    const result = decipher.finish();\n\n    if (result) {\n      return outputType === \"Hex\"\n        ? decipher.output.toHex()\n        : decipher.output.getBytes();\n    } else {\n      throw new OperationError(Dot(\"blowfishDecrypt.error.decryptFail\", \"Unable to decrypt input with these parameters.\"));\n    }\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Ciphers\",\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'blowfishDecrypt',\n      optName: Dot",
  "response": {
    "choices": [
      {
        "finish_reason": "length",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements implemented.\n\n1. A new method `getOptDetail` has been added to the `BlowfishDecrypt` class, following the pattern of the example.\n2. The description at the top of the file has been updated to reflect the purpose of the code.\n3. Natural text has been wrapped with the `Dot` function as required.\n4. Import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The BlowfishDecrypt class is a TypeScript implementation of the Blowfish decryption algorithm. It provides methods to decrypt data using the Blowfish cipher with various modes and input/output options.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport Utils from \"../Utils.mjs\";\nimport forge from \"node-forge\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { Blowfish } from \"../lib/Blowfish.mjs\";\n\n/**\n * BlowfishDecrypt operation\n */\nclass BlowfishDecrypt extends Operation {\n  /**\n   * BlowfishDecrypt constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"blowfishDecrypt.name\", \"Blowfish Decrypt\");\n    this.module = \"Ciphers\";\n    this.description = Dot(\"blowfishDecrypt.desc\", \"Blowfish is a symmetric-key block cipher designed in 1993 by Bruce Schneier and included in a large number of cipher suites and encryption products. AES now receives more attention.<br><br><b>IV:</b> The Initialization Vector should be 8 bytes long. If not entered, it will default to 8 null bytes.\");\n    this.infoURL = \"https://wikipedia.org/wiki/Blowfish_(cipher)\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"blowfishDecrypt.arg.key\", \"Key\"),\n        type: \"toggleString\",\n        value: \"\",\n        toggleValues: [\"Hex\", \"UTF8\", \"Latin1\", \"Base64\"],\n      },\n      {\n        name: Dot(\"blowfishDecrypt.arg.iv\", \"IV\"),\n        type: \"toggleString\",\n        value: \"\",\n        toggleValues: [\"Hex\", \"UTF8\", \"Latin1\", \"Base64\"],\n      },\n      {\n        name: Dot(\"blowfishDecrypt.arg.mode\", \"Mode\"),\n        type: \"option\",\n        value: [\"CBC\", \"CFB\", \"OFB\", \"CTR\", \"ECB\"],\n      },\n      {\n        name: Dot(\"blowfishDecrypt.arg.input\", \"Input\"),\n        type: \"option\",\n        value: [\"Hex\", \"Raw\"],\n      },\n      {\n        name: Dot(\"blowfishDecrypt.arg.output\", \"Output\"),\n        type: \"option\",\n        value: [\"Raw\", \"Hex\"],\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const key = Utils.convertToByteString(args[0].string, args[0].option),\n      iv = Utils.convertToByteString(args[1].string, args[1].option),\n      mode = args[2],\n      inputType = args[3],\n      outputType = args[4];\n\n    if (key.length !== 8) {\n      throw new OperationError(Dot(\"blowfishDecrypt.error.invalidKey\", `Invalid key length: ${key.length} bytes\n\nBlowfish uses a key length of 8 bytes (64 bits).`));\n    }\n\n    input = Utils.convertToByteString(input, inputType);\n\n    const decipher = Blowfish.createDecipher(key, mode);\n    decipher.start({ iv: iv });\n    decipher.update(forge.util.createBuffer(input));\n    const result = decipher.finish();\n\n    if (result) {\n      return outputType === \"Hex\"\n        ? decipher.output.toHex()\n        : decipher.output.getBytes();\n    } else {\n      throw new OperationError(Dot(\"blowfishDecrypt.error.decryptFail\", \"Unable to decrypt input with these parameters.\"));\n    }\n  }\n\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Ciphers\",\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'blowfishDecrypt',\n      optName: Dot",
          "role": "assistant"
        }
      }
    ],
    "created": 1713885534,
    "id": "8596361409376350268",
    "model": "glm-4",
    "request_id": "8596361409376350268",
    "usage": {
      "completion_tokens": 1024,
      "prompt_tokens": 1274,
      "total_tokens": 2298
    }
  }
}