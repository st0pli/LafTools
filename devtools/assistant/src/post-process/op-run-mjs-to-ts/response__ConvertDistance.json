{
  "result": "Below is the TypeScript (TS) version of the provided code, with the requested changes:\n\n1. A new method `getOptDetail` has been added to the `ConvertDistance` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text intended for users has been wrapped with the `Dot` function.\n4. The import statements remain unchanged as per the requirement.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class ConvertDistance that extends the Operation class. It provides functionality to convert a unit of distance from one format to another.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\n\n/**\n * Convert distance operation\n */\nclass ConvertDistance extends Operation {\n  /**\n   * ConvertDistance constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"convertDistance.name\", \"Convert distance\");\n    this.module = \"Default\";\n    this.description = Dot(\n      \"convertDistance.desc\",\n      \"Converts a unit of distance to another format.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Orders_of_magnitude_(length)\";\n    this.inputType = \"BigNumber\";\n    this.outputType = \"BigNumber\";\n    this.args = [\n      {\n        name: Dot(\"convertDistance.arg.inputUnits\", \"Input units\"),\n        type: \"option\",\n        value: DISTANCE_UNITS,\n      },\n      {\n        name: Dot(\"convertDistance.arg.outputUnits\", \"Output units\"),\n        type: \"option\",\n        value: DISTANCE_UNITS,\n      },\n    ];\n  }\n\n  /**\n   * @param {BigNumber} input\n   * @param {Object[]} args\n   * @returns {BigNumber}\n   */\n  run(input, args) {\n    const [inputUnits, outputUnits] = args;\n\n    input = input.times(DISTANCE_FACTOR[inputUnits]);\n    return input.div(DISTANCE_FACTOR[outputUnits]);\n  }\n\n  /**\n   * Get operation details\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Default\",\n        \"description\": Dot(\n          \"convertDistance.optDetail.desc\",\n          \"This operation converts a unit of distance to another unit.\"\n        ),\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'convertDistance',\n      optName: Dot(\"convertDistance.optName\", \"Convert {0}\", \"Distance\"),\n      optDescription: Dot(\n        \"convertDistance.optDesc\",\n        \"This operation converts distance from {0} to {1}.\",\n        [\"Input units\", \"Output units\"]\n      ),\n      exampleInput: new BigNumber(100), // Example input in meters\n      exampleOutput: \"<output>\", // Placeholder for output, depends on the units\n    };\n  }\n}\n\nconst DISTANCE_UNITS = [\n  // ... (Units array remains unchanged)\n];\n\nconst DISTANCE_FACTOR = {\n  // ... (Factors object remains unchanged)\n};\n\nexport default ConvertDistance;\n```\n\nPlease note the following:\n- Natural text has been wrapped with the `Dot` function, with keys generated for each unique string.\n- The `getOptDetail` method has been added, with example input and output placeholders.\n- The description at the top of the file has been filled out to describe the code's function and purpose.\n- The import statement remains unchanged, as per the instructions.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript (TS) version of the provided code, with the requested changes:\n\n1. A new method `getOptDetail` has been added to the `ConvertDistance` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text intended for users has been wrapped with the `Dot` function.\n4. The import statements remain unchanged as per the requirement.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class ConvertDistance that extends the Operation class. It provides functionality to convert a unit of distance from one format to another.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\n\n/**\n * Convert distance operation\n */\nclass ConvertDistance extends Operation {\n  /**\n   * ConvertDistance constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"convertDistance.name\", \"Convert distance\");\n    this.module = \"Default\";\n    this.description = Dot(\n      \"convertDistance.desc\",\n      \"Converts a unit of distance to another format.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Orders_of_magnitude_(length)\";\n    this.inputType = \"BigNumber\";\n    this.outputType = \"BigNumber\";\n    this.args = [\n      {\n        name: Dot(\"convertDistance.arg.inputUnits\", \"Input units\"),\n        type: \"option\",\n        value: DISTANCE_UNITS,\n      },\n      {\n        name: Dot(\"convertDistance.arg.outputUnits\", \"Output units\"),\n        type: \"option\",\n        value: DISTANCE_UNITS,\n      },\n    ];\n  }\n\n  /**\n   * @param {BigNumber} input\n   * @param {Object[]} args\n   * @returns {BigNumber}\n   */\n  run(input, args) {\n    const [inputUnits, outputUnits] = args;\n\n    input = input.times(DISTANCE_FACTOR[inputUnits]);\n    return input.div(DISTANCE_FACTOR[outputUnits]);\n  }\n\n  /**\n   * Get operation details\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Default\",\n        \"description\": Dot(\n          \"convertDistance.optDetail.desc\",\n          \"This operation converts a unit of distance to another unit.\"\n        ),\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'convertDistance',\n      optName: Dot(\"convertDistance.optName\", \"Convert {0}\", \"Distance\"),\n      optDescription: Dot(\n        \"convertDistance.optDesc\",\n        \"This operation converts distance from {0} to {1}.\",\n        [\"Input units\", \"Output units\"]\n      ),\n      exampleInput: new BigNumber(100), // Example input in meters\n      exampleOutput: \"<output>\", // Placeholder for output, depends on the units\n    };\n  }\n}\n\nconst DISTANCE_UNITS = [\n  // ... (Units array remains unchanged)\n];\n\nconst DISTANCE_FACTOR = {\n  // ... (Factors object remains unchanged)\n};\n\nexport default ConvertDistance;\n```\n\nPlease note the following:\n- Natural text has been wrapped with the `Dot` function, with keys generated for each unique string.\n- The `getOptDetail` method has been added, with example input and output placeholders.\n- The description at the top of the file has been filled out to describe the code's function and purpose.\n- The import statement remains unchanged, as per the instructions.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713886635,
    "id": "8596361237577615556",
    "model": "glm-4",
    "request_id": "8596361237577615556",
    "usage": {
      "completion_tokens": 812,
      "prompt_tokens": 1524,
      "total_tokens": 2336
    }
  }
}