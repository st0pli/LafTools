{
    "JSON-Advantages-011": "JSON est généralement plus petit et plus rapide à analyser que XML, ce qui le rend idéal pour les communications client-serveur où la bande passante et la vitesse sont cruciales.",
    "JSON-Basics-001": "Qu’est-ce que JSON ?",
    "JSON-Beautify-007": "Qu’est-ce que l’embellissement JSON ?",
    "JSON-Beautify-Def-008": "L'embellissement JSON fait référence au processus de formatage des données JSON sous une forme plus lisible par l'homme avec une indentation et des sauts de ligne appropriés, ce qui facilite l'analyse et le débogage.",
    "JSON-Beautify-Example-009": "Avant : '{\\\"key\\\":\\\"value\\\",\\\"array\\\":[1,2,3]}', Après : '{\\n \\\"key\\\": \\\"value\\\", \\n \\\"tableau\\\": [\\n 1,\\n 2,\\n 3\\n ]\\n}'",
    "JSON-Def-002": "JSON (JavaScript Object Notation) est un format d'échange de données léger, basé sur du texte, facile à lire et à écrire pour les humains, et facile à analyser et à générer pour les machines.",
    "JSON-JavaScript-Support-020": "JSON est nativement pris en charge par JavaScript via les objets globaux `JSON.parse()` et `JSON.stringify()`. Tout JSON valide est également un objet littéral ou un tableau JavaScript valide, ce qui permet une conversion transparente entre les deux formats.",
    "JSON-JavaScript-Usage-021": "Dans le développement Web, JSON est couramment utilisé pour les requêtes AJAX, le rendu côté serveur et le stockage de données (par exemple, stockage local ou IndexedDB).",
    "JSON-Linting-022": "Qu'est-ce que le linting JSON et pourquoi est-il important ?",
    "JSON-Linting-Benefit-024": "Linters peut éviter les erreurs d'exécution dues à un JSON non valide, garantissant un échange de données fluide et permettant de gagner du temps lors du débogage des problèmes potentiels.",
    "JSON-Linting-Explanation-023": "Le linting JSON est le processus permettant de vérifier si un document JSON adhère à la spécification JSON. Cela permet d'identifier les erreurs de syntaxe avant de tenter d'analyser les données.",
    "JSON-Path-013": "Qu’est-ce que le chemin JSON ?",
    "JSON-Path-Example-015": "$.store.book[0].title sélectionne le titre du premier livre dans un objet JSON avec un magasin contenant un tableau de livres.",
    "JSON-Path-Explanation-014": "JSON Path est un langage de requête similaire à XPath pour XML, vous permettant d'extraire des données de documents JSON à l'aide d'une notation de type chemin.",
    "JSON-Path-Guide": "JSONPath - XPath pour JSON",
    "JSON-Purpose-003": "Il est principalement utilisé pour transmettre des données entre un serveur et une application Web comme alternative au XML, avec un support natif en JavaScript via les méthodes `JSON.parse()` et `JSON.stringify()`.",
    "JSON-Scope-in-JavaScript-019": "Comment JSON s’intègre-t-il dans JavaScript ?",
    "JSON-Security-025": "Quels sont les problèmes de sécurité lorsque vous travaillez avec JSON ?",
    "JSON-Security-Impact-026": "Les risques de sécurité potentiels incluent les attaques par injection JSON, où des données malveillantes sont envoyées et pourraient provoquer un comportement involontaire lors de leur analyse/exécution.",
    "JSON-Security-Prevention-027": "Pour atténuer ces risques, nettoyez toujours les entrées de l'utilisateur et utilisez des bibliothèques qui analysent JSON en toute sécurité sans exécuter son contenu (comme le JSON.parse() intégré à JavaScript). Évitez également d'utiliser eval() pour analyser JSON.",
    "JSON-Serialization-016": "Qu'est-ce que la sérialisation et la désérialisation JSON ?",
    "JSON-Serialization-Def-017": "La sérialisation JSON est le processus de conversion d'un objet JavaScript en une chaîne JSON, tandis que la désérialisation est l'inverse : transformer une chaîne JSON en un objet JavaScript.",
    "JSON-Serialization-W3Schools": "Sérialisation JSON sur W3Schools",
    "JSON-Syntax-004": "Quelle est la syntaxe de base de JSON ?",
    "JSON-Syntax-Reference": "Documents Web MDN sur JSON",
    "JSON-Value-Types-006": "Les valeurs peuvent être des chaînes, des nombres, des booléens, des tableaux (entre crochets).",
    "JSON-vs-XML-010": "Comment JSON se compare-t-il à XML ?",
    "JSON-vs-XML-Article": "Comparaison de JSON et XML",
    "MDN-JSON-in-JavaScript": "MDN Web Docs - Travailler avec JSON",
    "OWASP-JSON-Injection": "OWASP-Injection JSON",
    "XML-Advantages-012": "XML offre une plus grande flexibilité de structure et prend en charge les espaces de noms, ce qui peut être bénéfique pour les structures de documents complexes et l'interopérabilité entre les systèmes."
}