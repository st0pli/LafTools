{
  "result": "Below is the TypeScript version of the provided JavaScript code, with the requested modifications:\n\n1. I've added a new method `getOptDetail` to the `ConvertImageFormat` class, following the pattern of the provided example.\n2. I've added an English description of the code's function and purpose at the top.\n3. Natural text intended for users has been wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class ConvertImageFormat that extends the Operation class. It provides functionality to convert images between different formats such as JPEG, PNG, BMP, and TIFF.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { isImage } from \"../lib/FileType.mjs\";\nimport { toBase64 } from \"../lib/Base64.mjs\";\n// import jimp from \"jimp\";\nconst jimp = require(\"jimp\");\n\n/**\n * Convert Image Format operation\n */\nclass ConvertImageFormat extends Operation {\n  /**\n   * ConvertImageFormat constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"imageConvert.name\", \"Convert Image Format\");\n    this.module = \"Image\";\n    this.description = Dot(\n      \"imageConvert.desc\",\n      \"Converts an image between different formats. Supported formats:<br><ul><li>Joint Photographic Experts Group (JPEG)</li><li>Portable Network Graphics (PNG)</li><li>Bitmap (BMP)</li><li>Tagged Image File Format (TIFF)</li></ul><br>Note: GIF files are supported for input, but cannot be outputted.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Image_file_formats\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.presentType = \"html\";\n    this.args = [\n      {\n        name: Dot(\"imageConvert.arg.outputFormat\", \"Output Format\"),\n        type: \"option\",\n        value: [\"JPEG\", \"PNG\", \"BMP\", \"TIFF\"],\n      },\n      {\n        name: Dot(\"imageConvert.arg.jpegQuality\", \"JPEG Quality\"),\n        type: \"number\",\n        value: 80,\n        min: 1,\n        max: 100,\n      },\n      {\n        name: Dot(\"imageConvert.arg.pngFilterType\", \"PNG Filter Type\"),\n        type: \"option\",\n        value: [\"Auto\", \"None\", \"Sub\", \"Up\", \"Average\", \"Paeth\"],\n      },\n      {\n        name: Dot(\"imageConvert.arg.pngDeflateLevel\", \"PNG Deflate Level\"),\n        type: \"number\",\n        value: 9,\n        min: 0,\n        max: 9,\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {byteArray}\n   */\n  async run(input: ArrayBuffer, args: any[]): Promise ArrayBuffer {\n    const [format, jpegQuality, pngFilterType, pngDeflateLevel] = args;\n    const formatMap = {\n      JPEG: jimp.MIME_JPEG,\n      PNG: jimp.MIME_PNG,\n      BMP: jimp.MIME_BMP,\n      TIFF: jimp.MIME_TIFF,\n    };\n\n    const pngFilterMap = {\n      Auto: jimp.PNG_FILTER_AUTO,\n      None: jimp.PNG_FILTER_NONE,\n      Sub: jimp.PNG_FILTER_SUB,\n      Up: jimp.PNG_FILTER_UP,\n      Average: jimp.PNG_FILTER_AVERAGE,\n      Paeth: jimp.PNG_FILTER_PATH,\n    };\n\n    const mime = formatMap[format];\n\n    if (!isImage(input)) {\n      throw new OperationError(Dot(\"imageConvert.error.invalidFormat\", \"Invalid file format.\"));\n    }\n    let image;\n    try {\n      image = await jimp.read(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"imageConvert.error.openImage\", `Error opening image file. (${err})`));\n    }\n    try {\n      switch (format) {\n        case \"JPEG\":\n          image.quality(jpegQuality);\n          break;\n        case \"PNG\":\n          image.filterType(pngFilterMap[pngFilterType]);\n          image.deflateLevel(pngDeflateLevel);\n          break;\n      }\n\n      const imageBuffer = await image.getBufferAsync(mime);\n      return imageBuffer.buffer;\n    } catch (err) {\n      throw new OperationError(Dot(\"imageConvert.error.convert\", `Error converting image format. (${err})`));\n    }\n  }\n\n  /**\n   * Displays the converted image using HTML for web apps\n   *\n   * @param {Array",
  "response": {
    "choices": [
      {
        "finish_reason": "length",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript version of the provided JavaScript code, with the requested modifications:\n\n1. I've added a new method `getOptDetail` to the `ConvertImageFormat` class, following the pattern of the provided example.\n2. I've added an English description of the code's function and purpose at the top.\n3. Natural text intended for users has been wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class ConvertImageFormat that extends the Operation class. It provides functionality to convert images between different formats such as JPEG, PNG, BMP, and TIFF.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { isImage } from \"../lib/FileType.mjs\";\nimport { toBase64 } from \"../lib/Base64.mjs\";\n// import jimp from \"jimp\";\nconst jimp = require(\"jimp\");\n\n/**\n * Convert Image Format operation\n */\nclass ConvertImageFormat extends Operation {\n  /**\n   * ConvertImageFormat constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"imageConvert.name\", \"Convert Image Format\");\n    this.module = \"Image\";\n    this.description = Dot(\n      \"imageConvert.desc\",\n      \"Converts an image between different formats. Supported formats:<br><ul><li>Joint Photographic Experts Group (JPEG)</li><li>Portable Network Graphics (PNG)</li><li>Bitmap (BMP)</li><li>Tagged Image File Format (TIFF)</li></ul><br>Note: GIF files are supported for input, but cannot be outputted.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Image_file_formats\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.presentType = \"html\";\n    this.args = [\n      {\n        name: Dot(\"imageConvert.arg.outputFormat\", \"Output Format\"),\n        type: \"option\",\n        value: [\"JPEG\", \"PNG\", \"BMP\", \"TIFF\"],\n      },\n      {\n        name: Dot(\"imageConvert.arg.jpegQuality\", \"JPEG Quality\"),\n        type: \"number\",\n        value: 80,\n        min: 1,\n        max: 100,\n      },\n      {\n        name: Dot(\"imageConvert.arg.pngFilterType\", \"PNG Filter Type\"),\n        type: \"option\",\n        value: [\"Auto\", \"None\", \"Sub\", \"Up\", \"Average\", \"Paeth\"],\n      },\n      {\n        name: Dot(\"imageConvert.arg.pngDeflateLevel\", \"PNG Deflate Level\"),\n        type: \"number\",\n        value: 9,\n        min: 0,\n        max: 9,\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {byteArray}\n   */\n  async run(input: ArrayBuffer, args: any[]): Promise ArrayBuffer {\n    const [format, jpegQuality, pngFilterType, pngDeflateLevel] = args;\n    const formatMap = {\n      JPEG: jimp.MIME_JPEG,\n      PNG: jimp.MIME_PNG,\n      BMP: jimp.MIME_BMP,\n      TIFF: jimp.MIME_TIFF,\n    };\n\n    const pngFilterMap = {\n      Auto: jimp.PNG_FILTER_AUTO,\n      None: jimp.PNG_FILTER_NONE,\n      Sub: jimp.PNG_FILTER_SUB,\n      Up: jimp.PNG_FILTER_UP,\n      Average: jimp.PNG_FILTER_AVERAGE,\n      Paeth: jimp.PNG_FILTER_PATH,\n    };\n\n    const mime = formatMap[format];\n\n    if (!isImage(input)) {\n      throw new OperationError(Dot(\"imageConvert.error.invalidFormat\", \"Invalid file format.\"));\n    }\n    let image;\n    try {\n      image = await jimp.read(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"imageConvert.error.openImage\", `Error opening image file. (${err})`));\n    }\n    try {\n      switch (format) {\n        case \"JPEG\":\n          image.quality(jpegQuality);\n          break;\n        case \"PNG\":\n          image.filterType(pngFilterMap[pngFilterType]);\n          image.deflateLevel(pngDeflateLevel);\n          break;\n      }\n\n      const imageBuffer = await image.getBufferAsync(mime);\n      return imageBuffer.buffer;\n    } catch (err) {\n      throw new OperationError(Dot(\"imageConvert.error.convert\", `Error converting image format. (${err})`));\n    }\n  }\n\n  /**\n   * Displays the converted image using HTML for web apps\n   *\n   * @param {Array",
          "role": "assistant"
        }
      }
    ],
    "created": 1713886669,
    "id": "8596355946177818989",
    "model": "glm-4",
    "request_id": "8596355946177818989",
    "usage": {
      "completion_tokens": 1024,
      "prompt_tokens": 1484,
      "total_tokens": 2508
    }
  }
}