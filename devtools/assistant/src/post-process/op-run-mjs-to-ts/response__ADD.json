{
  "result": "Below is the TypeScript conversion of the provided code, with the requested changes applied:\n\n1. A new method `getOptDetail` is added to the `ADD` class, following the pattern of the provided example.\n2. The description at the top of the file is filled out in English.\n3. Natural text is wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The ADD class represents a bitwise addition operation that can be applied to a byteArray input using a provided key, with the result being a byteArray.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport Utils from \"../Utils.mjs\";\nimport { bitOp, add, BITWISE_OP_DELIMS } from \"../lib/BitwiseOp.mjs\";\n\n/**\n * ADD operation\n */\nclass ADD extends Operation {\n  /**\n   * ADD constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"add.name\", \"ADD\");\n    this.module = \"Default\";\n    this.description = Dot(\"add.desc\", \"ADD the input with the given key (e.g. <code>fe023da5</code>), MOD 255\");\n    this.infoURL = Dot(\"add.infoUrl\", \"https://wikipedia.org/wiki/Bitwise_operation#Bitwise_operators\");\n    this.inputType = \"byteArray\";\n    this.outputType = \"byteArray\";\n    this.args = [\n      {\n        name: Dot(\"add.arg.key\", \"Key\"),\n        type: \"toggleString\",\n        value: \"\",\n        toggleValues: BITWISE_OP_DELIMS,\n      },\n    ];\n  }\n\n  /**\n   * @param {byteArray} input\n   * @param {Object[]} args\n   * @returns {byteArray}\n   */\n  run(input, args) {\n    const key = Utils.convertToByteArray(args[0].string || \"\", args[0].option);\n\n    return bitOp(input, key, add);\n  }\n\n  /**\n   * Highlight ADD\n   *\n   * @param {Object[]} pos\n   * @param {number} pos[].start\n   * @param {number} pos[].end\n   * @param {Object[]} args\n   * @returns {Object[]} pos\n   */\n  highlight(pos, args) {\n    return pos;\n  }\n\n  /**\n   * Highlight ADD in reverse\n   *\n   * @param {Object[]} pos\n   * @param {number} pos[].start\n   * @param {number} pos[].end\n   * @param {Object[]} args\n   * @returns {Object[]} pos\n   */\n  highlightReverse(pos, args) {\n    return pos;\n  }\n\n  /**\n   * Get operation details\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'add',\n      optName: Dot(\"add.optName\", \"Generate {0} Hash\", \"ADD\"),\n      optDescription: Dot(\n        \"add.optDesc\",\n        \"This operation performs a bitwise {0} on data.\",\n        \"ADD\"\n      ),\n      exampleInput: \"<byteArray>\", // Placeholder for example input\n      exampleOutput: \"<byteArray>\", // Placeholder for example output\n    }\n  }\n}\n\nexport default ADD;\n```\n\nPlease note that the `exampleInput` and `exampleOutput` fields are placeholders and should be replaced with actual example values if available. The `Dot` function is used to wrap all natural text that is displayed to the user, with unique keys for each string. The import statements have been preserved as per the instructions.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided code, with the requested changes applied:\n\n1. A new method `getOptDetail` is added to the `ADD` class, following the pattern of the provided example.\n2. The description at the top of the file is filled out in English.\n3. Natural text is wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The ADD class represents a bitwise addition operation that can be applied to a byteArray input using a provided key, with the result being a byteArray.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport Utils from \"../Utils.mjs\";\nimport { bitOp, add, BITWISE_OP_DELIMS } from \"../lib/BitwiseOp.mjs\";\n\n/**\n * ADD operation\n */\nclass ADD extends Operation {\n  /**\n   * ADD constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"add.name\", \"ADD\");\n    this.module = \"Default\";\n    this.description = Dot(\"add.desc\", \"ADD the input with the given key (e.g. <code>fe023da5</code>), MOD 255\");\n    this.infoURL = Dot(\"add.infoUrl\", \"https://wikipedia.org/wiki/Bitwise_operation#Bitwise_operators\");\n    this.inputType = \"byteArray\";\n    this.outputType = \"byteArray\";\n    this.args = [\n      {\n        name: Dot(\"add.arg.key\", \"Key\"),\n        type: \"toggleString\",\n        value: \"\",\n        toggleValues: BITWISE_OP_DELIMS,\n      },\n    ];\n  }\n\n  /**\n   * @param {byteArray} input\n   * @param {Object[]} args\n   * @returns {byteArray}\n   */\n  run(input, args) {\n    const key = Utils.convertToByteArray(args[0].string || \"\", args[0].option);\n\n    return bitOp(input, key, add);\n  }\n\n  /**\n   * Highlight ADD\n   *\n   * @param {Object[]} pos\n   * @param {number} pos[].start\n   * @param {number} pos[].end\n   * @param {Object[]} args\n   * @returns {Object[]} pos\n   */\n  highlight(pos, args) {\n    return pos;\n  }\n\n  /**\n   * Highlight ADD in reverse\n   *\n   * @param {Object[]} pos\n   * @param {number} pos[].start\n   * @param {number} pos[].end\n   * @param {Object[]} args\n   * @returns {Object[]} pos\n   */\n  highlightReverse(pos, args) {\n    return pos;\n  }\n\n  /**\n   * Get operation details\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'add',\n      optName: Dot(\"add.optName\", \"Generate {0} Hash\", \"ADD\"),\n      optDescription: Dot(\n        \"add.optDesc\",\n        \"This operation performs a bitwise {0} on data.\",\n        \"ADD\"\n      ),\n      exampleInput: \"<byteArray>\", // Placeholder for example input\n      exampleOutput: \"<byteArray>\", // Placeholder for example output\n    }\n  }\n}\n\nexport default ADD;\n```\n\nPlease note that the `exampleInput` and `exampleOutput` fields are placeholders and should be replaced with actual example values if available. The `Dot` function is used to wrap all natural text that is displayed to the user, with unique keys for each string. The import statements have been preserved as per the instructions.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713884510,
    "id": "8596355602580384836",
    "model": "glm-4",
    "request_id": "8596355602580384836",
    "usage": {
      "completion_tokens": 877,
      "prompt_tokens": 1047,
      "total_tokens": 1924
    }
  }
}