根据您的要求，下面是将代码中显示给用户的自然文本提炼成JSON格式的过程：

1. 找出所有自然文本。
2. 将这些文本放入一个名为`i18n`的对象中，并给每个文本赋予一个默认值`123`。
3. 根据代码的实际功能，将默认值`123`替换为中文翻译。
4. 输出JSON结果。

以下是按照上述步骤生成的JSON对象：

```json
{
  "i18n": {
    "Expand alphabet range": "扩展字母范围",
    "Expand an alphabet range string into a list of the characters in that range.": "将字母范围字符串扩展为该范围内的字符列表。",
    "e.g. a-z becomes abcdefghijklmnopqrstuvwxyz.": "例如：a-z 变成 abcdefghijklmnopqrstuvwxyz。",
    "Delimiter": "分隔符"
  }
}
```

以下是按照您提供的【示例1】格式化的结果：

```json
{
  "i18n": {
    "Expand alphabet range": "扩展字母范围",
    "Expand an alphabet range string into a list of the characters in that range.": "将字母范围字符串扩展为该范围内的字符列表。",
    "e.g. a-z becomes abcdefghijklmnopqrstuvwxyz.": "例如：a-z 会变成 abcdefghijklmnopqrstuvwxyz。",
    "Delimiter": "分隔符"
  }
}
```

在这个JSON对象中，每个key对应于代码中的自然文本，并且其value是相应的中文翻译。这些翻译是根据代码的功能和上下文进行的。