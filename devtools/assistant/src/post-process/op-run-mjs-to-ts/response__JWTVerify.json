{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` is added to the `JWTVerify` class, based on the pattern in the provided example.\n2. The description of the code's function is added to the top comment.\n3. Natural text is wrapped with the `Dot` function as per the example.\n4. The import statements remain unchanged.\n5. No code has been omitted or altered without necessity.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The JWTVerify class provides functionality to verify the validity of a JSON Web Token and ensure it has been signed with the correct secret or private key.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport jwt from \"jsonwebtoken\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { JWT_ALGORITHMS } from \"../lib/JWT.mjs\";\n\n/**\n * Dot function placeholder.\n * In actual implementation, this function should handle the internationalization or text management.\n */\nfunction Dot(key: string, text: string): string {\n  return text; // Replace this with actual Dot function implementation\n}\n\n/**\n * JWT Verify operation\n */\nclass JWTVerify extends Operation {\n  /**\n   * JWTVerify constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"jwtVerify.name\", \"JWT Verify\");\n    this.module = \"Crypto\";\n    this.description = Dot(\"jwtVerify.desc\", \"Verifies that a JSON Web Token is valid and has been signed with the provided secret / private key.<br><br>The key should be either the secret for HMAC algorithms or the PEM-encoded private key for RSA and ECDSA.\");\n    this.infoURL = \"https://wikipedia.org/wiki/JSON_Web_Token\";\n    this.inputType = \"string\";\n    this.outputType = \"JSON\";\n    this.args = [\n      {\n        name: Dot(\"jwtVerify.arg.key\", \"Public/Secret Key\"),\n        type: \"text\",\n        value: \"secret\",\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input: string, args: any[]): object {\n    const [key] = args;\n    const algos = JWT_ALGORITHMS;\n    algos[algos.indexOf(\"None\")] = \"none\";\n\n    try {\n      const verified = jwt.verify(input, key, { algorithms: algos });\n\n      if (\n        Object.prototype.hasOwnProperty.call(verified, \"name\") &&\n        verified.name === \"JsonWebTokenError\"\n      ) {\n        throw new OperationError(verified.message);\n      }\n\n      return verified;\n    } catch (err) {\n      throw new OperationError(err);\n    }\n  }\n\n  /**\n   * getOptDetail method to provide operation details\n   */\n  public getOptDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Crypto\",\n        \"description\": Dot(\"jwtVerify.config.desc\", \"Verifies the integrity and authenticity of a JSON Web Token.\"),\n        \"infoURL\": \"https://wikipedia.org/wiki/JSON_Web_Token\",\n        \"inputType\": \"string\",\n        \"outputType\": \"JSON\",\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": []\n      },\n      infoURL: 'https://en.wikipedia.org/wiki/JSON_Web_Token',\n      nousenouseID: 'jwtVerify',\n      optName: Dot(\"jwtVerify.optName\", \"Verify {0}\", \"JWT\"),\n      optDescription: Dot(\n        \"jwtVerify.optDesc\",\n        \"This operation checks if a given JSON Web Token is valid and has been signed with the expected {0}.\",\n        \"key\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"<>\", // Placeholder for actual output\n    }\n  }\n}\n\nexport default JWTVerify;\n```\n\nPlease note that the `Dot` function is just a placeholder here, and you would need to implement it according to your actual use case for internationalization or text management. The `exampleOutput` is wrapped in angle brackets to indicate that it should be replaced with actual output. The `getOptDetail` method is added as per the pattern in the example, with placeholders for the `exampleInput` and `exampleOutput`.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` is added to the `JWTVerify` class, based on the pattern in the provided example.\n2. The description of the code's function is added to the top comment.\n3. Natural text is wrapped with the `Dot` function as per the example.\n4. The import statements remain unchanged.\n5. No code has been omitted or altered without necessity.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The JWTVerify class provides functionality to verify the validity of a JSON Web Token and ensure it has been signed with the correct secret or private key.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport jwt from \"jsonwebtoken\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { JWT_ALGORITHMS } from \"../lib/JWT.mjs\";\n\n/**\n * Dot function placeholder.\n * In actual implementation, this function should handle the internationalization or text management.\n */\nfunction Dot(key: string, text: string): string {\n  return text; // Replace this with actual Dot function implementation\n}\n\n/**\n * JWT Verify operation\n */\nclass JWTVerify extends Operation {\n  /**\n   * JWTVerify constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"jwtVerify.name\", \"JWT Verify\");\n    this.module = \"Crypto\";\n    this.description = Dot(\"jwtVerify.desc\", \"Verifies that a JSON Web Token is valid and has been signed with the provided secret / private key.<br><br>The key should be either the secret for HMAC algorithms or the PEM-encoded private key for RSA and ECDSA.\");\n    this.infoURL = \"https://wikipedia.org/wiki/JSON_Web_Token\";\n    this.inputType = \"string\";\n    this.outputType = \"JSON\";\n    this.args = [\n      {\n        name: Dot(\"jwtVerify.arg.key\", \"Public/Secret Key\"),\n        type: \"text\",\n        value: \"secret\",\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input: string, args: any[]): object {\n    const [key] = args;\n    const algos = JWT_ALGORITHMS;\n    algos[algos.indexOf(\"None\")] = \"none\";\n\n    try {\n      const verified = jwt.verify(input, key, { algorithms: algos });\n\n      if (\n        Object.prototype.hasOwnProperty.call(verified, \"name\") &&\n        verified.name === \"JsonWebTokenError\"\n      ) {\n        throw new OperationError(verified.message);\n      }\n\n      return verified;\n    } catch (err) {\n      throw new OperationError(err);\n    }\n  }\n\n  /**\n   * getOptDetail method to provide operation details\n   */\n  public getOptDetail(): any {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Crypto\",\n        \"description\": Dot(\"jwtVerify.config.desc\", \"Verifies the integrity and authenticity of a JSON Web Token.\"),\n        \"infoURL\": \"https://wikipedia.org/wiki/JSON_Web_Token\",\n        \"inputType\": \"string\",\n        \"outputType\": \"JSON\",\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": []\n      },\n      infoURL: 'https://en.wikipedia.org/wiki/JSON_Web_Token',\n      nousenouseID: 'jwtVerify',\n      optName: Dot(\"jwtVerify.optName\", \"Verify {0}\", \"JWT\"),\n      optDescription: Dot(\n        \"jwtVerify.optDesc\",\n        \"This operation checks if a given JSON Web Token is valid and has been signed with the expected {0}.\",\n        \"key\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"<>\", // Placeholder for actual output\n    }\n  }\n}\n\nexport default JWTVerify;\n```\n\nPlease note that the `Dot` function is just a placeholder here, and you would need to implement it according to your actual use case for internationalization or text management. The `exampleOutput` is wrapped in angle brackets to indicate that it should be replaced with actual output. The `getOptDetail` method is added as per the pattern in the example, with placeholders for the `exampleInput` and `exampleOutput`.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713890911,
    "id": "8596361478095790090",
    "model": "glm-4",
    "request_id": "8596361478095790090",
    "usage": {
      "completion_tokens": 956,
      "prompt_tokens": 1006,
      "total_tokens": 1962
    }
  }
}