{
  "result": "Below is the TypeScript conversion of the provided code, with the requested changes applied:\n\n1. A new method `getOptDetail` is added to the `AffineCipherEncode` class, following the pattern of the provided example.\n2. The description of the code's function is added to the top comment.\n3. Natural text is wrapped with the `Dot` function.\n4. The import statement remains unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The AffineCipherEncode class is a TypeScript implementation of the Affine cipher encoding operation, which is a type of monoalphabetic substitution cipher. It provides methods to encrypt text using a mathematical function and to highlight encoded text.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { affineEncode } from \"../lib/Ciphers.mjs\";\n\n/**\n * Affine Cipher Encode operation\n */\nclass AffineCipherEncode extends Operation {\n  /**\n   * AffineCipherEncode constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"affine.name\", \"Affine Cipher Encode\");\n    this.module = \"Ciphers\";\n    this.description = Dot(\n      \"affine.desc\",\n      \"The Affine cipher is a type of monoalphabetic substitution cipher, wherein each letter in an alphabet is mapped to its numeric equivalent, encrypted using simple mathematical function, <code>(ax + b) % 26</code>, and converted back to a letter.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Affine_cipher\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: \"a\",\n        type: \"number\",\n        value: 1,\n      },\n      {\n        name: \"b\",\n        type: \"number\",\n        value: 0,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    return affineEncode(input, args);\n  }\n\n  /**\n   * Highlight Affine Cipher Encode\n   *\n   * @param {Object[]} pos\n   * @param {number} pos[].start\n   * @param {number} pos[].end\n   * @param {Object[]} args\n   * @returns {Object[]} pos\n   */\n  highlight(pos, args) {\n    return pos;\n  }\n\n  /**\n   * Highlight Affine Cipher Encode in reverse\n   *\n   * @param {Object[]} pos\n   * @param {number} pos[].start\n   * @param {number} pos[].end\n   * @param {Object[]} args\n   * @returns {Object[]} pos\n   */\n  highlightReverse(pos, args) {\n    return pos;\n  }\n\n  /**\n   * Get details for the Affine Cipher Encode operation\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'affine',\n      optName: Dot(\"affine.optName\", \"Generate {0} Encoded Text\", \"Affine Cipher\"),\n      optDescription: Dot(\n        \"affine.optDesc\",\n        \"This operation encodes data using the {0} cipher.\",\n        \"Affine\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default AffineCipherEncode;\n```\n\nPlease note that the `Dot` function is used to wrap all the natural text that is displayed to the user, and a new `getOptDetail` method is added to the `AffineCipherEncode` class, which provides the details of the operation. The `exampleInput` and `exampleOutput` fields are left empty, as they would need specific examples to be filled in.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided code, with the requested changes applied:\n\n1. A new method `getOptDetail` is added to the `AffineCipherEncode` class, following the pattern of the provided example.\n2. The description of the code's function is added to the top comment.\n3. Natural text is wrapped with the `Dot` function.\n4. The import statement remains unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The AffineCipherEncode class is a TypeScript implementation of the Affine cipher encoding operation, which is a type of monoalphabetic substitution cipher. It provides methods to encrypt text using a mathematical function and to highlight encoded text.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { affineEncode } from \"../lib/Ciphers.mjs\";\n\n/**\n * Affine Cipher Encode operation\n */\nclass AffineCipherEncode extends Operation {\n  /**\n   * AffineCipherEncode constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"affine.name\", \"Affine Cipher Encode\");\n    this.module = \"Ciphers\";\n    this.description = Dot(\n      \"affine.desc\",\n      \"The Affine cipher is a type of monoalphabetic substitution cipher, wherein each letter in an alphabet is mapped to its numeric equivalent, encrypted using simple mathematical function, <code>(ax + b) % 26</code>, and converted back to a letter.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Affine_cipher\";\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: \"a\",\n        type: \"number\",\n        value: 1,\n      },\n      {\n        name: \"b\",\n        type: \"number\",\n        value: 0,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    return affineEncode(input, args);\n  }\n\n  /**\n   * Highlight Affine Cipher Encode\n   *\n   * @param {Object[]} pos\n   * @param {number} pos[].start\n   * @param {number} pos[].end\n   * @param {Object[]} args\n   * @returns {Object[]} pos\n   */\n  highlight(pos, args) {\n    return pos;\n  }\n\n  /**\n   * Highlight Affine Cipher Encode in reverse\n   *\n   * @param {Object[]} pos\n   * @param {number} pos[].start\n   * @param {number} pos[].end\n   * @param {Object[]} args\n   * @returns {Object[]} pos\n   */\n  highlightReverse(pos, args) {\n    return pos;\n  }\n\n  /**\n   * Get details for the Affine Cipher Encode operation\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'affine',\n      optName: Dot(\"affine.optName\", \"Generate {0} Encoded Text\", \"Affine Cipher\"),\n      optDescription: Dot(\n        \"affine.optDesc\",\n        \"This operation encodes data using the {0} cipher.\",\n        \"Affine\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default AffineCipherEncode;\n```\n\nPlease note that the `Dot` function is used to wrap all the natural text that is displayed to the user, and a new `getOptDetail` method is added to the `AffineCipherEncode` class, which provides the details of the operation. The `exampleInput` and `exampleOutput` fields are left empty, as they would need specific examples to be filled in.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713884845,
    "id": "8596355705659620205",
    "model": "glm-4",
    "request_id": "8596355705659620205",
    "usage": {
      "completion_tokens": 926,
      "prompt_tokens": 1055,
      "total_tokens": 1981
    }
  }
}