{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` is added to the `GetTime` class, following the pattern of the provided example.\n2. The description of the code's function is added at the top.\n3. Natural text is wrapped with the `Dot` function.\n4. Import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The GetTime class is used to generate a timestamp representing the time since the UNIX epoch. It uses the W3C High Resolution Time API and allows for different granularities of time units.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { UNITS } from \"../lib/DateTime.mjs\";\n\n/**\n * Get Time operation\n */\nclass GetTime extends Operation {\n  /**\n   * GetTime constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"getTime.name\", \"Get Time\");\n    this.module = \"Default\";\n    this.description = Dot(\n      \"getTime.desc\",\n      \"Generates a timestamp showing the amount of time since the UNIX epoch (1970-01-01 00:00:00 UTC). Uses the W3C High Resolution Time API.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Unix_time\";\n    this.inputType = \"string\";\n    this.outputType = \"number\";\n    this.args = [\n      {\n        name: Dot(\"getTime.arg.granularity\", \"Granularity\"),\n        type: \"option\",\n        value: UNITS,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {number}\n   */\n  run(input, args) {\n    const nowMs = performance.timeOrigin + performance.now(),\n      granularity = args[0];\n\n    switch (granularity) {\n      case \"Nanoseconds (ns)\":\n        return Math.round(nowMs * 1000 * 1000);\n      case \"Microseconds (μs)\":\n        return Math.round(nowMs * 1000);\n      case \"Milliseconds (ms)\":\n        return Math.round(nowMs);\n      case \"Seconds (s)\":\n        return Math.round(nowMs / 1000);\n      default:\n        throw new OperationError(Dot(\"getTime.error\", \"Unknown granularity value: {0}\", granularity));\n    }\n  }\n\n  /**\n   * GetOptDetail method for operation details\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Default\",\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'getTime',\n      optName: Dot(\"getTime.optName\", \"Generate Timestamp\"),\n      optDescription: Dot(\n        \"getTime.optDesc\",\n        \"This operation generates a timestamp with the specified {0}.\",\n        \"Granularity\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"<number>\", // Fill it if possible, wrapped in angle brackets as a placeholder\n    }\n  }\n}\n\nexport default GetTime;\n```\n\nPlease note that the `exampleInput` and `exampleOutput` fields are left empty or with placeholders, as the actual values would depend on the specific use case of the `GetTime` operation. The `Dot` function is used to wrap natural text that is displayed to the user, and the description at the top of the file is filled out to describe the class's function and purpose.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` is added to the `GetTime` class, following the pattern of the provided example.\n2. The description of the code's function is added at the top.\n3. Natural text is wrapped with the `Dot` function.\n4. Import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The GetTime class is used to generate a timestamp representing the time since the UNIX epoch. It uses the W3C High Resolution Time API and allows for different granularities of time units.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { UNITS } from \"../lib/DateTime.mjs\";\n\n/**\n * Get Time operation\n */\nclass GetTime extends Operation {\n  /**\n   * GetTime constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"getTime.name\", \"Get Time\");\n    this.module = \"Default\";\n    this.description = Dot(\n      \"getTime.desc\",\n      \"Generates a timestamp showing the amount of time since the UNIX epoch (1970-01-01 00:00:00 UTC). Uses the W3C High Resolution Time API.\"\n    );\n    this.infoURL = \"https://wikipedia.org/wiki/Unix_time\";\n    this.inputType = \"string\";\n    this.outputType = \"number\";\n    this.args = [\n      {\n        name: Dot(\"getTime.arg.granularity\", \"Granularity\"),\n        type: \"option\",\n        value: UNITS,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {number}\n   */\n  run(input, args) {\n    const nowMs = performance.timeOrigin + performance.now(),\n      granularity = args[0];\n\n    switch (granularity) {\n      case \"Nanoseconds (ns)\":\n        return Math.round(nowMs * 1000 * 1000);\n      case \"Microseconds (μs)\":\n        return Math.round(nowMs * 1000);\n      case \"Milliseconds (ms)\":\n        return Math.round(nowMs);\n      case \"Seconds (s)\":\n        return Math.round(nowMs / 1000);\n      default:\n        throw new OperationError(Dot(\"getTime.error\", \"Unknown granularity value: {0}\", granularity));\n    }\n  }\n\n  /**\n   * GetOptDetail method for operation details\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Default\",\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'getTime',\n      optName: Dot(\"getTime.optName\", \"Generate Timestamp\"),\n      optDescription: Dot(\n        \"getTime.optDesc\",\n        \"This operation generates a timestamp with the specified {0}.\",\n        \"Granularity\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"<number>\", // Fill it if possible, wrapped in angle brackets as a placeholder\n    }\n  }\n}\n\nexport default GetTime;\n```\n\nPlease note that the `exampleInput` and `exampleOutput` fields are left empty or with placeholders, as the actual values would depend on the specific use case of the `GetTime` operation. The `Dot` function is used to wrap natural text that is displayed to the user, and the description at the top of the file is filled out to describe the class's function and purpose.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713889500,
    "id": "8596361512455560129",
    "model": "glm-4",
    "request_id": "8596361512455560129",
    "usage": {
      "completion_tokens": 853,
      "prompt_tokens": 1001,
      "total_tokens": 1854
    }
  }
}