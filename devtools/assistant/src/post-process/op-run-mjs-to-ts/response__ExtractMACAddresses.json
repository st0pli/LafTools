{
  "result": "Below is the TypeScript conversion of the provided code, with the additional requirements met:\n\n1. A new method `getOptDetail` is added to the `ExtractMACAddresses` class, following the pattern of the provided example.\n2. The description of the code's function and purpose is added to the top comment.\n3. Natural text messages are wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class to extract MAC addresses from input strings using regular expressions. It provides options to display the total count, sort, and ensure uniqueness of the MAC addresses.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { search } from \"../lib/Extract.mjs\";\nimport { hexadecimalSort } from \"../lib/Sort.mjs\";\n\n/**\n * Extract MAC addresses operation\n */\nclass ExtractMACAddresses extends Operation {\n  /**\n   * ExtractMACAddresses constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"macExtract.name\", \"Extract MAC addresses\");\n    this.module = \"Regex\";\n    this.description = Dot(\n      \"macExtract.desc\",\n      \"Extracts all Media Access Control (MAC) addresses from the input.\"\n    );\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"macExtract.arg.displayTotal\", \"Display total\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"macExtract.arg.sort\", \"Sort\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"macExtract.arg.unique\", \"Unique\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const [displayTotal, sort, unique] = args,\n      regex = /[A-F\\d]{2}(?:[:-][A-F\\d]{2}){5}/gi,\n      results = search(\n        input,\n        regex,\n        null,\n        sort ? hexadecimalSort : null,\n        unique\n      );\n\n    if (displayTotal) {\n      return Dot(\n        \"macExtract.result.total\",\n        `Total found: {0}\\n\\n{1}`,\n        results.length,\n        results.join(\"\\n\")\n      );\n    } else {\n      return results.join(\"\\n\");\n    }\n  }\n\n  /**\n   * Get operation details for UI display\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        module: \"Regex\",\n        description: Dot(\n          \"macExtract.config.desc\",\n          \"Extracts all Media Access Control (MAC) addresses from the input.\"\n        ),\n        infoURL: \"https://wikipedia.org/wiki/MAC_address\",\n        inputType: \"string\",\n        outputType: \"string\",\n        flowControl: false,\n        manualBake: false,\n        args: this.args,\n      },\n      infoURL: 'https://en.wikipedia.org/wiki/MAC_address',\n      nousenouseID: 'extractMacAddresses',\n      optName: Dot(\"macExtract.optName\", \"Extract {0} Addresses\", \"MAC\"),\n      optDescription: Dot(\n        \"macExtract.optDesc\",\n        \"This operation extracts {0} addresses from the input text.\",\n        \"MAC\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default ExtractMACAddresses;\n```\n\nPlease note that the `Dot` function's first argument is a unique identifier for the string, and the second is the string itself. The unique identifier is used to reference the string content for localization or other purposes. The `exampleInput` and `exampleOutput` fields are left empty, as the actual values would depend on the specific use case of the `ExtractMACAddresses` operation.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided code, with the additional requirements met:\n\n1. A new method `getOptDetail` is added to the `ExtractMACAddresses` class, following the pattern of the provided example.\n2. The description of the code's function and purpose is added to the top comment.\n3. Natural text messages are wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: This code defines a class to extract MAC addresses from input strings using regular expressions. It provides options to display the total count, sort, and ensure uniqueness of the MAC addresses.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport { search } from \"../lib/Extract.mjs\";\nimport { hexadecimalSort } from \"../lib/Sort.mjs\";\n\n/**\n * Extract MAC addresses operation\n */\nclass ExtractMACAddresses extends Operation {\n  /**\n   * ExtractMACAddresses constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"macExtract.name\", \"Extract MAC addresses\");\n    this.module = \"Regex\";\n    this.description = Dot(\n      \"macExtract.desc\",\n      \"Extracts all Media Access Control (MAC) addresses from the input.\"\n    );\n    this.inputType = \"string\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"macExtract.arg.displayTotal\", \"Display total\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"macExtract.arg.sort\", \"Sort\"),\n        type: \"boolean\",\n        value: false,\n      },\n      {\n        name: Dot(\"macExtract.arg.unique\", \"Unique\"),\n        type: \"boolean\",\n        value: false,\n      },\n    ];\n  }\n\n  /**\n   * @param {string} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const [displayTotal, sort, unique] = args,\n      regex = /[A-F\\d]{2}(?:[:-][A-F\\d]{2}){5}/gi,\n      results = search(\n        input,\n        regex,\n        null,\n        sort ? hexadecimalSort : null,\n        unique\n      );\n\n    if (displayTotal) {\n      return Dot(\n        \"macExtract.result.total\",\n        `Total found: {0}\\n\\n{1}`,\n        results.length,\n        results.join(\"\\n\")\n      );\n    } else {\n      return results.join(\"\\n\");\n    }\n  }\n\n  /**\n   * Get operation details for UI display\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        module: \"Regex\",\n        description: Dot(\n          \"macExtract.config.desc\",\n          \"Extracts all Media Access Control (MAC) addresses from the input.\"\n        ),\n        infoURL: \"https://wikipedia.org/wiki/MAC_address\",\n        inputType: \"string\",\n        outputType: \"string\",\n        flowControl: false,\n        manualBake: false,\n        args: this.args,\n      },\n      infoURL: 'https://en.wikipedia.org/wiki/MAC_address',\n      nousenouseID: 'extractMacAddresses',\n      optName: Dot(\"macExtract.optName\", \"Extract {0} Addresses\", \"MAC\"),\n      optDescription: Dot(\n        \"macExtract.optDesc\",\n        \"This operation extracts {0} addresses from the input text.\",\n        \"MAC\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default ExtractMACAddresses;\n```\n\nPlease note that the `Dot` function's first argument is a unique identifier for the string, and the second is the string itself. The unique identifier is used to reference the string content for localization or other purposes. The `exampleInput` and `exampleOutput` fields are left empty, as the actual values would depend on the specific use case of the `ExtractMACAddresses` operation.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713888422,
    "id": "8596361478095822592",
    "model": "glm-4",
    "request_id": "8596361478095822592",
    "usage": {
      "completion_tokens": 888,
      "prompt_tokens": 968,
      "total_tokens": 1856
    }
  }
}