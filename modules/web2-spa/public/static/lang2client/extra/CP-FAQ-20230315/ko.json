{
    "CP-Advantage-Career-014": "프로그래밍을 배우면 다양한 산업 분야에서 경력 기회가 열리고 혁신적인 솔루션을 개발하고 작업을 자동화하며 복잡한 시스템을 이해할 수 있습니다.",
    "CP-Advantages-013": "컴퓨터 프로그래밍을 배우면 어떤 장점이 있나요?",
    "CP-Basics-001": "컴퓨터 프로그래밍이란 무엇입니까?",
    "CP-Def-002": "컴퓨터 프로그래밍에는 특정 작업을 수행하는 방법을 컴퓨터에 지시하기 위해 프로그래밍 언어로 지침 또는 코드를 작성하는 작업이 포함됩니다.",
    "CP-History-004": "컴퓨터 프로그래밍의 역사는 무엇입니까?",
    "CP-History-Origin-005": "최초의 프로그래밍 가능한 기계는 19세기 Charles Babbage의 분석 엔진에 대한 Ada Lovelace의 작업으로 거슬러 올라갑니다. 그러나 현대 프로그래밍은 1940년대 최초의 범용 전자 컴퓨터인 ENIAC이 발명되면서 시작되었습니다.",
    "CP-Lang-Choice-009": "언어 선택은 프로젝트 요구 사항, 커뮤니티 지원, 학습 용이성 및 성능 요구 사항과 같은 요소에 따라 달라집니다.",
    "CP-Language-Evolution-006": "그 이후로 프로그래밍 언어는 기계 코드에서 어셈블리로, 그리고 FORTRAN, COBOL, C와 같은 고급 언어로, 그리고 이제는 Python, JavaScript, Rust와 같은 현대 언어로 발전했습니다.",
    "CP-Languages-007": "인기 있는 프로그래밍 언어에는 어떤 것이 있나요?",
    "CP-Languages-List-008": "널리 사용되는 프로그래밍 언어로는 Java, Python, JavaScript, C++, C#, Swift, Go, PHP, Ruby 및 Kotlin이 있습니다. 예를 들어 데이터 과학을 위한 Python, 웹 개발을 위한 JavaScript, 시스템 프로그래밍을 위한 C++ 등 각각 고유한 장점과 사용 사례가 있습니다.",
    "CP-Process-010": "컴퓨터 프로그래밍의 과정은 무엇입니까?",
    "CP-Process-Explanation-011": "프로그래밍에는 일반적으로 계획(문제 정의 및 솔루션 설계), 코딩(선택한 언어로 소스 코드 작성), 테스트(디버깅 및 기능 확인), 유지 관리(시간이 지남에 따라 프로그램 업데이트 및 개선)가 포함됩니다.",
    "CP-Purpose-003": "프로그래머는 알고리즘을 만들고, 문제를 해결하고, 프로세스를 자동화하고, 데이터를 조작하고, 사용자 또는 다른 시스템과 상호 작용할 수 있는 소프트웨어 애플리케이션을 구축합니다.",
    "CP-SDLC-012": "이는 요구 사항 분석, 설계, 배포, 사용자 수용 테스트 등의 추가 단계를 포함하는 소프트웨어 개발 수명 주기(SDLC) 내에서 구성되는 경우가 많습니다.",
    "CP-Skillset-015": "또한 논리적 사고, 문제 해결 능력, 신기술에 대한 적응력을 향상시켜 디지털 시대에 더욱 다재다능하게 만듭니다.",
    "HistOfProg-Wikipedia": "프로그래밍 언어의 역사 - Wikipedia",
    "SDLC-Wikipedia": "소프트웨어 개발 수명주기 - Wikipedia",
    "TIOBE-Index": "TIOBE 지수 - 소프트웨어 품질 회사"
}