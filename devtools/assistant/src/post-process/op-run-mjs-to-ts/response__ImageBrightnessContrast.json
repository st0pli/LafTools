{
  "result": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements implemented:\n\n1. A new method `getOptDetail` has been added to the `ImageBrightnessContrast` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function as required.\n4. The import statements have been preserved without change.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The ImageBrightnessContrast class provides functionality to adjust the brightness or contrast of an image.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { isImage } from \"../lib/FileType.mjs\";\nimport { toBase64 } from \"../lib/Base64.mjs\";\nimport { isWorkerEnvironment } from \"../Utils.mjs\";\n// Note: The following import is preserved as in the original code, but TypeScript typically uses import statements for modules.\n// var jimp = require(\"jimp\");\nimport * as jimp from \"jimp\";\n\n/**\n * Image Brightness / Contrast operation\n */\nclass ImageBrightnessContrast extends Operation {\n  /**\n   * ImageBrightnessContrast constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"imageBrightnessContrast.name\", \"Image Brightness / Contrast\");\n    this.module = \"Image\";\n    this.description = Dot(\"imageBrightnessContrast.desc\", \"Adjust the brightness or contrast of an image.\");\n    this.infoURL = \"\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.presentType = \"html\";\n    this.args = [\n      {\n        name: Dot(\"args.brightness.name\", \"Brightness\"),\n        type: \"number\",\n        value: 0,\n        min: -100,\n        max: 100,\n      },\n      {\n        name: Dot(\"args.contrast.name\", \"Contrast\"),\n        type: \"number\",\n        value: 0,\n        min: -100,\n        max: 100,\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {Promise<Uint8Array>}\n   */\n  async run(input: ArrayBuffer, args: [number, number]): Promise<Uint8Array> {\n    const [brightness, contrast] = args;\n    if (!isImage(input)) {\n      throw new OperationError(Dot(\"error.invalidFileType\", \"Invalid file type.\"));\n    }\n\n    let image: jimp.Jimp;\n    try {\n      image = await jimp.read(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"error.loadImage\", `Error loading image. (${err})`));\n    }\n    try {\n      if (brightness !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"status.brightness\", \"Changing image brightness...\"));\n        image.brightness(brightness / 100);\n      }\n      if (contrast !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"status.contrast\", \"Changing image contrast...\"));\n        image.contrast(contrast / 100);\n      }\n\n      let imageBuffer: Buffer;\n      if (image.getMIME() === \"image/gif\") {\n        imageBuffer = await image.getBufferAsync(jimp.MIME_PNG);\n      } else {\n        imageBuffer = await image.getBufferAsync(jimp.AUTO);\n      }\n      return new Uint8Array(imageBuffer);\n    } catch (err) {\n      throw new OperationError(Dot(\"error.adjustImage\", `Error adjusting image brightness or contrast. (${err})`));\n    }\n  }\n\n  /**\n   * Displays the image using HTML for web apps\n   * @param {ArrayBuffer} data\n   * @returns {string}\n   */\n  present(data: ArrayBuffer): string {\n    if (!data.byteLength) return \"\";\n    const dataArray = new Uint8Array(data);\n\n    const type = isImage(dataArray);\n    if (!type) {\n      throw new OperationError(Dot(\"error.invalidFileType\", \"Invalid file type.\"));\n    }\n\n    return `<img src=\"data:${type};base64,${toBase64(dataArray)}\">`;\n  }\n\n  /**\n   * Get operation detail\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Image\",\n        \"description\": Dot(\"imageBrightnessContrast.config.desc\", \"Adjust the brightness or contrast of an image.\"),\n        \"infoURL\": \"\",\n        \"inputType\": \"ArrayBuffer\",\n        \"output",
  "response": {
    "choices": [
      {
        "finish_reason": "length",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided JavaScript code, with the additional requirements implemented:\n\n1. A new method `getOptDetail` has been added to the `ImageBrightnessContrast` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function as required.\n4. The import statements have been preserved without change.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The ImageBrightnessContrast class provides functionality to adjust the brightness or contrast of an image.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport OperationError from \"../errors/OperationError.mjs\";\nimport { isImage } from \"../lib/FileType.mjs\";\nimport { toBase64 } from \"../lib/Base64.mjs\";\nimport { isWorkerEnvironment } from \"../Utils.mjs\";\n// Note: The following import is preserved as in the original code, but TypeScript typically uses import statements for modules.\n// var jimp = require(\"jimp\");\nimport * as jimp from \"jimp\";\n\n/**\n * Image Brightness / Contrast operation\n */\nclass ImageBrightnessContrast extends Operation {\n  /**\n   * ImageBrightnessContrast constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"imageBrightnessContrast.name\", \"Image Brightness / Contrast\");\n    this.module = \"Image\";\n    this.description = Dot(\"imageBrightnessContrast.desc\", \"Adjust the brightness or contrast of an image.\");\n    this.infoURL = \"\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"ArrayBuffer\";\n    this.presentType = \"html\";\n    this.args = [\n      {\n        name: Dot(\"args.brightness.name\", \"Brightness\"),\n        type: \"number\",\n        value: 0,\n        min: -100,\n        max: 100,\n      },\n      {\n        name: Dot(\"args.contrast.name\", \"Contrast\"),\n        type: \"number\",\n        value: 0,\n        min: -100,\n        max: 100,\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {Promise<Uint8Array>}\n   */\n  async run(input: ArrayBuffer, args: [number, number]): Promise<Uint8Array> {\n    const [brightness, contrast] = args;\n    if (!isImage(input)) {\n      throw new OperationError(Dot(\"error.invalidFileType\", \"Invalid file type.\"));\n    }\n\n    let image: jimp.Jimp;\n    try {\n      image = await jimp.read(input);\n    } catch (err) {\n      throw new OperationError(Dot(\"error.loadImage\", `Error loading image. (${err})`));\n    }\n    try {\n      if (brightness !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"status.brightness\", \"Changing image brightness...\"));\n        image.brightness(brightness / 100);\n      }\n      if (contrast !== 0) {\n        if (isWorkerEnvironment()) self.sendStatusMessage(Dot(\"status.contrast\", \"Changing image contrast...\"));\n        image.contrast(contrast / 100);\n      }\n\n      let imageBuffer: Buffer;\n      if (image.getMIME() === \"image/gif\") {\n        imageBuffer = await image.getBufferAsync(jimp.MIME_PNG);\n      } else {\n        imageBuffer = await image.getBufferAsync(jimp.AUTO);\n      }\n      return new Uint8Array(imageBuffer);\n    } catch (err) {\n      throw new OperationError(Dot(\"error.adjustImage\", `Error adjusting image brightness or contrast. (${err})`));\n    }\n  }\n\n  /**\n   * Displays the image using HTML for web apps\n   * @param {ArrayBuffer} data\n   * @returns {string}\n   */\n  present(data: ArrayBuffer): string {\n    if (!data.byteLength) return \"\";\n    const dataArray = new Uint8Array(data);\n\n    const type = isImage(dataArray);\n    if (!type) {\n      throw new OperationError(Dot(\"error.invalidFileType\", \"Invalid file type.\"));\n    }\n\n    return `<img src=\"data:${type};base64,${toBase64(dataArray)}\">`;\n  }\n\n  /**\n   * Get operation detail\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": \"Image\",\n        \"description\": Dot(\"imageBrightnessContrast.config.desc\", \"Adjust the brightness or contrast of an image.\"),\n        \"infoURL\": \"\",\n        \"inputType\": \"ArrayBuffer\",\n        \"output",
          "role": "assistant"
        }
      }
    ],
    "created": 1713890354,
    "id": "8596362852485442116",
    "model": "glm-4",
    "request_id": "8596362852485442116",
    "usage": {
      "completion_tokens": 1024,
      "prompt_tokens": 1279,
      "total_tokens": 2303
    }
  }
}