{
  "result": "Below is the TypeScript version of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` has been added to the `Keccak` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n5. No part of the code has been omitted or summarized.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The Keccak class provides a SHA-3 hashing operation implementation using the Keccak algorithm. It allows the selection of different hash sizes and is part of the Crypto module.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport JSSHA3 from \"js-sha3\";\nimport OperationError from \"../errors/OperationError.mjs\";\n\n/**\n * Keccak operation\n */\nclass Keccak extends Operation {\n  /**\n   * Keccak constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"keccak.name\", \"Keccak\");\n    this.module = \"Crypto\";\n    this.description = Dot(\"keccak.desc\", \"The Keccak hash algorithm was designed by Guido Bertoni, Joan Daemen, Michaël Peeters, and Gilles Van Assche, building upon RadioGatún. It was selected as the winner of the SHA-3 design competition.<br><br>This version of the algorithm is Keccak[c=2d] and differs from the SHA-3 specification.\");\n    this.infoURL = \"https://wikipedia.org/wiki/SHA-3\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"keccak.arg.size\", \"Size\"),\n        type: \"option\",\n        value: [\"512\", \"384\", \"256\", \"224\"],\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const size = parseInt(args[0], 10);\n    let algo;\n\n    switch (size) {\n      case 224:\n        algo = JSSHA3.keccak224;\n        break;\n      case 384:\n        algo = JSSHA3.keccak384;\n        break;\n      case 256:\n        algo = JSSHA3.keccak256;\n        break;\n      case 512:\n        algo = JSSHA3.keccak512;\n        break;\n      default:\n        throw new OperationError(Dot(\"keccak.err.invalidSize\", \"Invalid size\"));\n    }\n\n    return algo(input);\n  }\n\n  /**\n   * Get detailed information about the operation.\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'keccak',\n      optName: Dot(\"keccak.optName\", \"Generate {0} Hash\", \"Keccak\"),\n      optDescription: Dot(\n        \"keccak.optDesc\",\n        \"This operation hashes data into a {0} hash.\",\n        \"Keccak\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default Keccak;\n```\n\nPlease note that the `Dot` function is not defined in the provided code. It is assumed to be a function that takes a key and a string, and possibly additional arguments, to create a localized string. The `OptDetail` interface is also not defined, but it is assumed to exist and have the structure used in the `getOptDetail` method. The `exampleInput` and `exampleOutput` fields are left empty as per the instructions, and the actual `Dot` function implementation should be provided by the environment where this code is used.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript version of the provided JavaScript code, with the requested changes applied:\n\n1. A new method `getOptDetail` has been added to the `Keccak` class, following the pattern of the provided example.\n2. The description of the code's function and purpose has been added to the top comment.\n3. Natural text has been wrapped with the `Dot` function.\n4. The import statements remain unchanged.\n5. No part of the code has been omitted or summarized.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The Keccak class provides a SHA-3 hashing operation implementation using the Keccak algorithm. It allows the selection of different hash sizes and is part of the Crypto module.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport JSSHA3 from \"js-sha3\";\nimport OperationError from \"../errors/OperationError.mjs\";\n\n/**\n * Keccak operation\n */\nclass Keccak extends Operation {\n  /**\n   * Keccak constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"keccak.name\", \"Keccak\");\n    this.module = \"Crypto\";\n    this.description = Dot(\"keccak.desc\", \"The Keccak hash algorithm was designed by Guido Bertoni, Joan Daemen, Michaël Peeters, and Gilles Van Assche, building upon RadioGatún. It was selected as the winner of the SHA-3 design competition.<br><br>This version of the algorithm is Keccak[c=2d] and differs from the SHA-3 specification.\");\n    this.infoURL = \"https://wikipedia.org/wiki/SHA-3\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"string\";\n    this.args = [\n      {\n        name: Dot(\"keccak.arg.size\", \"Size\"),\n        type: \"option\",\n        value: [\"512\", \"384\", \"256\", \"224\"],\n      },\n    ];\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {string}\n   */\n  run(input, args) {\n    const size = parseInt(args[0], 10);\n    let algo;\n\n    switch (size) {\n      case 224:\n        algo = JSSHA3.keccak224;\n        break;\n      case 384:\n        algo = JSSHA3.keccak384;\n        break;\n      case 256:\n        algo = JSSHA3.keccak256;\n        break;\n      case 512:\n        algo = JSSHA3.keccak512;\n        break;\n      default:\n        throw new OperationError(Dot(\"keccak.err.invalidSize\", \"Invalid size\"));\n    }\n\n    return algo(input);\n  }\n\n  /**\n   * Get detailed information about the operation.\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args,\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'keccak',\n      optName: Dot(\"keccak.optName\", \"Generate {0} Hash\", \"Keccak\"),\n      optDescription: Dot(\n        \"keccak.optDesc\",\n        \"This operation hashes data into a {0} hash.\",\n        \"Keccak\"\n      ),\n      exampleInput: \"\", // Fill it if possible\n      exampleOutput: \"\", // Fill it if possible\n    }\n  }\n}\n\nexport default Keccak;\n```\n\nPlease note that the `Dot` function is not defined in the provided code. It is assumed to be a function that takes a key and a string, and possibly additional arguments, to create a localized string. The `OptDetail` interface is also not defined, but it is assumed to exist and have the structure used in the `getOptDetail` method. The `exampleInput` and `exampleOutput` fields are left empty as per the instructions, and the actual `Dot` function implementation should be provided by the environment where this code is used.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713890951,
    "id": "8596361478095790329",
    "model": "glm-4",
    "request_id": "8596361478095790329",
    "usage": {
      "completion_tokens": 940,
      "prompt_tokens": 1053,
      "total_tokens": 1993
    }
  }
}