{
  "result": "Below is the TypeScript conversion of the provided code, with the requested changes applied:\n\n1. I've added a new method `getOptDetail` to the `CBORDecode` class, based on the structure of the `MD5` example provided.\n2. I've added an English description at the top of the file.\n3. Natural text messages have been wrapped with the `Dot` function.\n4. Import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The CBORDecode class is a TypeScript implementation for decoding data using the CBOR serialization format. It extends the Operation class and provides a method to deserialize CBOR encoded binary data into a JSON object.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport Cbor from \"cbor\";\n\n/**\n * CBOR Decode operation\n */\nclass CBORDecode extends Operation {\n  /**\n   * CBORDecode constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"cborDecode.name\", \"CBOR Decode\");\n    this.module = \"Serialise\";\n    this.description = Dot(\"cborDecode.desc\", \"Concise Binary Object Representation (CBOR) is a binary data serialization format loosely based on JSON. Like JSON it allows the transmission of data objects that contain name–value pairs, but in a more concise manner. This increases processing and transfer speeds at the cost of human readability. It is defined in IETF RFC 8949.\");\n    this.infoURL = \"https://wikipedia.org/wiki/CBOR\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"JSON\";\n    this.args = [];\n  }\n\n  /**\n   * Get detailed information about the operation.\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'cborDecode',\n      optName: Dot(\"cborDecode.optName\", \"Generate {0} Object\", \"CBOR Decoded\"),\n      optDescription: Dot(\n        \"cborDecode.optDesc\",\n        \"This operation decodes data from a {0} format to a JSON object.\",\n        \"CBOR\"\n      ),\n      exampleInput: \"<ArrayBuffer>\", // Placeholder for example input\n      exampleOutput: \"<JSON Object>\", // Placeholder for example output\n    }\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {JSON}\n   */\n  run(input, args) {\n    return Cbor.decodeFirstSync(Buffer.from(input).toString(\"hex\"));\n  }\n}\n\nexport default CBORDecode;\n```\n\nPlease note the following:\n- The `getDescription` method has been named `getOptDetail` as per the provided example.\n- Natural text has been wrapped with the `Dot` function, where the first argument is a unique identifier for the text and the second is the actual text content.\n- Example input and output have been provided with placeholders, as the actual values would depend on the specific use case.\n- The description at the top of the file has been filled in to describe the class's function and purpose.",
  "response": {
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "message": {
          "content": "Below is the TypeScript conversion of the provided code, with the requested changes applied:\n\n1. I've added a new method `getOptDetail` to the `CBORDecode` class, based on the structure of the `MD5` example provided.\n2. I've added an English description at the top of the file.\n3. Natural text messages have been wrapped with the `Dot` function.\n4. Import statements have been left unchanged.\n\n```typescript\n// Date: Sun, 14 Jan 2024\n// Second Author: Ryan Laf\n// Description: The CBORDecode class is a TypeScript implementation for decoding data using the CBOR serialization format. It extends the Operation class and provides a method to deserialize CBOR encoded binary data into a JSON object.\n// License: AGPLv3\n// Copyright (C) 2024 - Present, https://laftools.dev and https://codegen.cc\n\nimport Operation from \"../Operation.tsx\";\nimport Cbor from \"cbor\";\n\n/**\n * CBOR Decode operation\n */\nclass CBORDecode extends Operation {\n  /**\n   * CBORDecode constructor\n   */\n  constructor() {\n    super();\n\n    this.name = Dot(\"cborDecode.name\", \"CBOR Decode\");\n    this.module = \"Serialise\";\n    this.description = Dot(\"cborDecode.desc\", \"Concise Binary Object Representation (CBOR) is a binary data serialization format loosely based on JSON. Like JSON it allows the transmission of data objects that contain name–value pairs, but in a more concise manner. This increases processing and transfer speeds at the cost of human readability. It is defined in IETF RFC 8949.\");\n    this.infoURL = \"https://wikipedia.org/wiki/CBOR\";\n    this.inputType = \"ArrayBuffer\";\n    this.outputType = \"JSON\";\n    this.args = [];\n  }\n\n  /**\n   * Get detailed information about the operation.\n   */\n  public getOptDetail(): OptDetail {\n    return {\n      relatedID: 'nothing', // keep it, don't change\n      config: {\n        \"module\": this.module,\n        \"description\": this.description,\n        \"infoURL\": this.infoURL,\n        \"inputType\": this.inputType,\n        \"outputType\": this.outputType,\n        \"flowControl\": false,\n        \"manualBake\": false,\n        \"args\": this.args\n      },\n      infoURL: this.infoURL,\n      nousenouseID: 'cborDecode',\n      optName: Dot(\"cborDecode.optName\", \"Generate {0} Object\", \"CBOR Decoded\"),\n      optDescription: Dot(\n        \"cborDecode.optDesc\",\n        \"This operation decodes data from a {0} format to a JSON object.\",\n        \"CBOR\"\n      ),\n      exampleInput: \"<ArrayBuffer>\", // Placeholder for example input\n      exampleOutput: \"<JSON Object>\", // Placeholder for example output\n    }\n  }\n\n  /**\n   * @param {ArrayBuffer} input\n   * @param {Object[]} args\n   * @returns {JSON}\n   */\n  run(input, args) {\n    return Cbor.decodeFirstSync(Buffer.from(input).toString(\"hex\"));\n  }\n}\n\nexport default CBORDecode;\n```\n\nPlease note the following:\n- The `getDescription` method has been named `getOptDetail` as per the provided example.\n- Natural text has been wrapped with the `Dot` function, where the first argument is a unique identifier for the text and the second is the actual text content.\n- Example input and output have been provided with placeholders, as the actual values would depend on the specific use case.\n- The description at the top of the file has been filled in to describe the class's function and purpose.",
          "role": "assistant"
        }
      }
    ],
    "created": 1713885910,
    "id": "8596361168858141795",
    "model": "glm-4",
    "request_id": "8596361168858141795",
    "usage": {
      "completion_tokens": 776,
      "prompt_tokens": 871,
      "total_tokens": 1647
    }
  }
}