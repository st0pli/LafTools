{
    "JSON-Advantages-011": "JSON 通常比 XML 更小且解析速度更快，因此非常適合頻寬和速度至關重要的客戶端伺服器通訊。",
    "JSON-Basics-001": "什麼是 JSON？",
    "JSON-Beautify-007": "什麼是 JSON 美化？",
    "JSON-Beautify-Def-008": "JSON 美化是指將 JSON 資料格式化為更易於人類閱讀的形式並具有適當的縮排和換行符的過程，使其更易於分析和調試。",
    "JSON-Beautify-Example-009": "前： '{\\\"key\\\":\\\"value\\\",\\\"array\\\":[1,2,3]}'，之後： '{\\n \\\"key\\\": \\\"value\\\", \\n \\\"數組\\\": [\\n 1,\\n 2,\\n 3\\n ]\\n}'",
    "JSON-Def-002": "JSON（JavaScript 物件表示法）是一種輕量級、基於文字的資料交換格式，易於人類閱讀和編寫，也易於機器解析和生成。",
    "JSON-JavaScript-Support-020": "JavaScript 透過全域物件「JSON.parse()」和「JSON.stringify()」原生支援 JSON。任何有效的 JSON 也是有效的 JavaScript 文字物件或數組，它允許兩種格式之間的無縫轉換。",
    "JSON-JavaScript-Usage-021": "在 Web 開發中，JSON 通常用於 AJAX 請求、伺服器端渲染和資料儲存（例如本機儲存或 IndexedDB）。",
    "JSON-Linting-022": "什麼是 JSON linting？為什麼它很重要？",
    "JSON-Linting-Benefit-024": "Linters 可防止因無效 JSON 而導致的執行階段錯誤，​​確保資料交換順利並節省除錯潛在問題的時間。",
    "JSON-Linting-Explanation-023": "JSON linting 是檢查 JSON 文件是否符合 JSON 規範的過程。它有助於在嘗試解析資料之前識別語法錯誤。",
    "JSON-Path-013": "什麼是 JSON 路徑？",
    "JSON-Path-Example-015": "$.store.book[0].title 選擇 JSON 物件中第一本書的標題，該物件的商店包含 books 陣列。",
    "JSON-Path-Explanation-014": "JSON Path 是一種類似 XML 的 XPath 的查詢語言，可讓您使用類似路徑的表示法從 JSON 文件中提取資料。",
    "JSON-Path-Guide": "JSONPath - JSON 的 XPath",
    "JSON-Purpose-003": "它主要用於在伺服器和 Web 應用程式之間傳輸數據，作為 XML 的替代方案，並透過「JSON.parse()」和「JSON.stringify()」方法在 JavaScript 中提供本機支援。",
    "JSON-Scope-in-JavaScript-019": "JSON 如何適應 JavaScript？",
    "JSON-Security-025": "使用 JSON 時有哪些安全性問題？",
    "JSON-Security-Impact-026": "潛在的安全風險包括 JSON 註入攻擊，其中發送的惡意資料可能在解析/執行時導致意外行為。",
    "JSON-Security-Prevention-027": "為了減輕這些風險，請務必清理使用者輸入並使用安全解析 JSON 而不執行其內容的程式庫（例如 JavaScript 的內建 JSON.parse()）。另外，避免使用 eval() 來解析 JSON。",
    "JSON-Serialization-016": "什麼是 JSON 序列化和反序列化？",
    "JSON-Serialization-Def-017": "JSON 序列化是將 JavaScript 物件轉換為 JSON 字串的過程，而反序列化則相反，將 JSON 字串轉換回 JavaScript 物件。",
    "JSON-Serialization-W3Schools": "W3Schools 上的 JSON 序列化",
    "JSON-Syntax-004": "JSON 的基本語法是什麼？",
    "JSON-Syntax-Example-f005": "JSON 物件由括在大括號 {0} 中的鍵值對組成。每個鍵必須是用雙引號括起來的字串，後面跟著冒號，然後是其值。",
    "JSON-Syntax-Reference": "JSON 上的 MDN Web 文檔",
    "JSON-Value-Types-006": "值可以是字串、數字、布林值、陣列（用方括號括起來）",
    "JSON-vs-XML-010": "JSON 與 XML 相比如何？",
    "JSON-vs-XML-Article": "比較 JSON 和 XML",
    "MDN-JSON-in-JavaScript": "MDN 網路文件 - 使用 JSON",
    "OWASP-JSON-Injection": "OWASP - JSON 註入",
    "XML-Advantages-012": "XML 提供了更多的結構靈活性並支援命名空間，這有利於複雜的文件結構和跨系統的互通性。"
}