{
    "a4s6x": "Base32는 어떻게 작동하나요?",
    "a8b7z": "따라서 패딩은 인코딩되는 마지막 비트 그룹이 40비트로 나누어지지 않는 경우에만 필요합니다(8개의 Base32 문자는 40비트를 나타내기 때문). 패딩은 인코딩된 문자열 끝에 0~6개의 '=' 문자로 구성됩니다.",
    "b8g2k": "Base32의 사용 시나리오",
    "c0v2p": "Base32를 사용한 일반적인 작업",
    "d1x7v": "또 다른 예는 Git에 있는데, 줄 끝 및 파일 이름 제한 문제를 피하기 위해 해시된 개체가 때때로 Base32 형식으로 저장됩니다. 또한 HashiCorp Vault는 키 파생을 위해 Base32를 사용합니다.",
    "d9w7m": "또한 대문자만 사용하기 때문에 Base64가 디코딩 중에 대소문자를 접는 경우와 같은 추가 보안 조치처럼 대소문자 구분의 가능한 모든 조합을 활용할 수 없습니다.",
    "e5c7r": "Base32는 32자의 하위 집합을 사용하여 ASCII 문자열의 데이터를 나타내는 이진-텍스트 인코딩 체계입니다. 이는 사람이 읽을 수 있고 URL로부터 안전하도록 설계되었습니다.",
    "f0q4w": "널리 사용되는 사용 시나리오 중 하나는 Google Authenticator 및 Yubikey와 같은 서비스가 Base32로 인코딩된 비밀을 사용하는 2단계 인증(2FA)을 위한 비밀 키를 생성하는 것입니다.",
    "f5a0s": "또한 Base32는 더 긴 출력을 생성하지만 파일 시스템 규칙과 충돌할 수 있는 특수 문자가 없기 때문에 파일 이름과 같은 특정 애플리케이션에 더 적합할 수 있습니다.",
    "g8r3e": "Base32의 가장 큰 단점은 상대적으로 공간 효율성이 낮다는 것입니다. Base64보다 약 25% 더 많은 입력 데이터를 확장합니다. 이는 동일한 양의 인코딩된 데이터에 대해 더 많은 저장 공간이나 대역폭을 차지한다는 것을 의미합니다.",
    "h4e1b": "또한 특정 컨텍스트(예: URL 또는 파일 이름)에서 문제를 일으킬 수 있는 영숫자가 아닌 문자가 포함될 수 있는 16진수 또는 base64보다 대소문자를 구분하는 영숫자 문자열을 처리하기 쉬운 상황에도 유용합니다.",
    "h9j3m": "Base32의 패딩",
    "i9o7k": "Base64에 비해 Base32의 장점",
    "j1b5k": "Base32와 관련된 가장 일반적인 작업에는 이진 데이터를 Base32 문자열로 인코딩하고 Base32 문자열을 원래 이진 형식으로 다시 디코딩하는 것이 포함됩니다.",
    "k7g0n": "Base32에서는 입력 데이터의 모든 5비트가 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=' 세트의 32개 문자 중 하나로 매핑됩니다.",
    "l1p9z": "Base32란 무엇입니까?",
    "m6d8b": "각 5비트 값은 단일 문자로 표시되므로 옥텟(8비트 단위) 작업을 선호하는 시스템에 효율적인 인코딩 및 디코딩이 가능합니다.",
    "n3e7r": "Base32의 역사",
    "p9s5t": "Base32는 JavaScript에 대한 기여로 유명한 Douglas Crockford가 2001년에 개발했습니다. 특히 이진 데이터의 텍스트 기반 표현이 필요한 상황에서 Base64와 같은 기존 인코딩에 대한 보다 안정적인 대안으로 만들어졌습니다.",
    "q2w5m": "Base32를 사용하는 목적은 무엇입니까?",
    "r6tq9z": "<b>예:</b> Base32에서 'TEST12345'를 인코딩하려면 Node.js의 base32-encode와 같은 라이브러리를 사용하거나 Python의 base64.b32encode와 같은 다른 언어의 내장 함수를 사용할 수 있습니다.",
    "s5t0n": "Base32의 패딩에는 인코딩된 데이터의 최종 청크에 여전히 8비트의 배수가 포함되도록 '=' 문자를 추가하는 작업이 포함됩니다. 그러나 Base64와 달리 Base32 패딩은 각 Base32 문자가 이미 5비트를 인코딩하므로 최소화됩니다.",
    "t8z1v": "전체 5비트 그룹을 채울 만큼 끝에 남은 비트가 충분하지 않은 경우 패딩 문자 '='가 추가됩니다. 예를 들어, 바이트에는 2개의 Base32 문자가 필요하고 3바이트 시퀀스에는 4개의 Base32 문자가 필요합니다.",
    "u3j9p": "Base32는 파일 무결성 검사, 지오캐싱, 보안 비밀번호 생성 등 정보 손실 없이 입력하거나 인쇄할 수 있는 이진 데이터의 압축된 텍스트 표현이 필요할 때 자주 사용됩니다.",
    "y6t1n": "Base32의 단점",
    "z2x8c": "Base32는 대문자와 숫자만 사용하기 때문에 시각적 모호성이 적고, '+', '/' 및 소문자를 포함하는 Base64에 비해 손으로 또는 전화로 읽고 표기하기가 더 쉽습니다.",
    "z6m1c": "z-base-32와 같은 최신 변형이 도입되어 기억에 덜 남는 문자를 다른 문자로 대체했지만 Crockford의 원래 사양은 오늘날에도 널리 사용되고 있습니다."
}